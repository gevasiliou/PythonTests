WEBSERVER:BASICS: CHEAT SHEET by gv

##APACHE2
To be added - chapter on how to manually install and configure apache2

##PHP
In Debian 12 , the php version available is 8.2
All bellow commands should be run as root or with sudo.
Source: https://www.installconfig.com/doku.php?id=configure_ubuntu_server_20_04_host_nextcloud_hub_21

Step 1: apt install php libapache2-mod-php libapache2-mod-fcgid php-fpm 
Tip: You can just apt install php to install typical php that will be handled by Apache2.

Step 2: write a simple test.php file inside /var/www/html folder, containing just those two lines:
<?php
phpinfo();

Step 3: open a php interactive shell with php -a and run phpinfo();
If you see output, you have confirmed that php (as languge) is installed in your system.

Step 4: geany /etc/apache2/apache2.conf
To the end of file , add this line:
SetHandler application/x-httpd-php

Step 5: It is a good idea, though not well understood why in this point, to enable php-fpm (CGI Web Server Support) since it is claimed that CGI has better / faster php support over Apache2. 
To enable php-fpm you have to disable older php modules and load new php-fpm modules:
a2dismod mpm_event
a2enmod mpm_prefork
a2enmod php8.2
a2enmod proxy_fcgi setenvif
a2enconf php8.2-fpm
a2query -m php8.2 
#a2query is just a question to the system / query - you expect to get a positive confirmation in your query


Step 6: Edit the php configuration file and comment out / disable the following lines:
geany /etc/apache2/mods-enabled/php8.2.conf
# Running PHP scripts in user directories is disabled by default
# 
# To re-enable PHP in user directories comment the following lines
# (from <IfModule ...> to </IfModule>.) Do NOT set it to On as it
# prevents .htaccess files from disabling it.
#<IfModule mod_userdir.c>
#    <Directory /home/*/public_html>
#        php_admin_flag engine Off
#    </Directory>
#</IfModule>

Step 7: systemctl restart apache2

Step 8: Navigate to http://127.0.0.1/test.php and everything should work ok.
PS: Considering that you had a working apache2 server , meaning that you have a default index.html file and meaning that visiting http://127.0.0.1 works ok.

Step 9: It seems good option to install some php extensions in your system:
sudo apt install php-gd php-mysql php-curl php-mbstring
sudo apt install php-intl php-gmp php-bcmath php-xml phpunit
sudo apt install libapache2-mod-php php-zip php-imagick php-apcu

#PHP Composer
composer is a kind of php libraries installer.

.B Installing Composer according to https://getcomposer.org/
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

If everything is ok, you should receive a success confirmation

Last step: sudo mv composer.phar /usr/local/bin/composer


##PHP MODBUS
As of today (19.10.23) there is a Github Project capable to provide libraries for TCP Modbus Communication.
https://github.com/aldas/modbus-tcp-client

.B Use PHP built-in webserver for PLC Communication

sudo apt-get install php-mbstring
sudo apt install php-curl
sudo apt install php-xml
sudo apt install phpunit
sudo service apache2 restart
composer update OR sudo /home/gv/composer.phar update
composer require aldas/modbus-tcp-client

git clone https://github.com/aldas/modbus-tcp-client.git
cd modbus-tcp-client
composer install
cd modbus—tcp-client/examples && touch .allow-change

File .allow-change is used as a flag, to allow users to change IP address / IP Port.
Without this file present IP address and IP Port of webserver will be grayed out / locked/hardcoded in index.php file.
File .allow-change can be empty.

.B Run the webserver
php -S localhost:8080 -t examples/

-S switch: Run Built-in php webserver
-t switch: Define the root directory of PHP webserver. If not provided cwd will be used as root directory
Now open http://localhost:8080 in browser. See additional query parameters from index.php.

Tip:
aldas "Examples" folder has index.php inside. 
index.php is used with php built-in web server to test out communication with our own PLCs.

Tip2: php -S localhost:8080 /path/to/index.html -> This is a valid synthax to serve a particular file with php -S

##NODE JS
.I https://phoenixnap.com/kb/debian-install-nodejs

.B Install nodejs on Debian
apt install nodejs            # installation of nodejs core
apt install npm               # npm is a package manager for nodejs
curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash  # This will install nvm
source ~/.profile             # after installation of nvm
nvm ls-remote                 # list available nodejs versions
nvm install <nodejs version>  # install nodejs specific version, i.e nvm install 12.1
nvm ls                        # list locally installed versions
nvm use 18.1                  # use a specific nvm version
npm install module            # npm = nodejs package manager- Can install various nodejs modules (i.e sudo npm install -g ws path http express body-parser yargs fs modbus-serial)
nodejs script.js              # use nodejs to run file script.js on commandline

.B Websockets [ws nodejs module]
The use of websockets servers (i.e inside a server.js file) allows websocket clients to get connected and receive messages by the server.
An html page can be used as websocket client (using javascript).
As a result you can achieve to have html pages with content updated dynamically , as received (push) by the ws server.
Actually with node you can enclose in a simple file tcp (or express ) server, websocket server , http server.
For better results you could use different ports on each server.
Typical data flow inside server js:
* html page (ws client) connects to server ws server
* Json sending APIs get connected to express or tcp servers to post their values
* http is serving the html file you want.
* When new json data arrive in tcp/express then ws server push those data to ws clients and html pages refresh their content by pasring the json string received by the ws server.

Check out thingit server files for more.

.B INCLUDE
Very important, used to include external node modules and use their libraries.

Example of a file called config.js
exports.port = process.env.PORT || 3000;
exports.max_request_length = 100000; // The maximum length of characters allowed for a request or a response.
exports.max_requests_per_second = 10; // The maximum number of requests per second to allow from a given IP.

##Usage of config.js with your main node.js file:
var config = require("./config");

##Usage of config.js variables in main script file
function sendTooBigResponse(res) {
    return writeResponse(res, 413, "the content in the request or response cannot exceed " + config.max_request_length + " characters.");
}

 if (config.blacklist_hostname_regex.test(remoteURL.hostname)) {
            return writeResponse(res, 400, "naughty, naughty...");
        }

WEBSERVER:DOMAIN NAME REGISTRATION – WEBHOSTING – AWS CLOUD HOSTING

##Register a Domain Name
Though i am located in Greece, I didn’t want a .gr domain name but I would like a .io tld, which proved to be quite expensive compared to other tld types like .gr or .online.

I finally ended up with ‘.online’ domain registered with namecheap at 1/8 of Greek registrars price (~1 euro for 1 year). 
Greek Registrars require ~2.5€ per year for .gr domain or 8 euro for .online for 1 year  (ps: i paid just 1 euro for 1 year). 

To complete my domain name registration I used namecheap.
https://ap.www.namecheap.com/Domains/DomainControlPanel/thingit.online/advancedns 

After purchasing your required domain name you have to update dns records in order your domain name to point out to your web hosting server (aws in my case). 

All registrars provide a kind of web-based control panel for managing domain names purchased.
Tip: https://www.namecheap.com/support/knowledgebase/article.aspx/434/2237/how-do-i-set-up-host-records-for-a-domain/

##Hosting Types
a.	Shared Hosting -> The cheapest one – suitable for personal web sites / small business serving static web pages without big demands. The physical server resources (cpu, ram, net speed, bandwitch, etc) are shared to all the server web-pages/users. Performance can be dependent on the total server workload, meaning that other web-pages/users might affect the performance of the physical web server. 
It is quite classical in this type of Hosting the web page admin has not direct access to the server (i.e using ssh) and all the setup takes place by using the server control panel (i.e cPanel).

b.	VPS Hosting (Virtual Private Server) -> Is the next step of Shared Hosting, each user has it’s own virtual server (consider physical server split to different pieces / containers). In this case each “container” has a predefined amount of hardware to be used (cpu, ram, etc) and the performance is not affected by the other users/web-pages activities. 
In VPS it seems that ssh to your virtual server is possible. At least in AWS that was cool.
I could use the server terminal and install anything necessary.

c.	Dedicated Server Hosting -> One step further than the VPS, you do rent a full / complete server on your own and you are using 100% of the server hardware for your own web-pages. Obviously ssh (quite unrestricted I suppose) it is supported.

d.	Cloud Hosting – Not clear yet – seems to be a kind of VPS but running on the cloud, meaning that your web files might be copied to different servers in order guaranteed uptime to be achieved (if one cloud server fails due to error, overload etc then your web page traffic is redirected and served by another cloud server.

##Working with AWS (Amazon Web Services) for webhosting.
Guide: https://middleware.io/blog/virtual-machine-on-aws-guide/
Starting Point: https://portal.aws.amazon.com/billing/signup?#/start

Amazon Web Services (AWS) is actually providing a cloud based hosting with VPS.

Setup of aws seems to be a headache, but it proved that following the “guides” it works. 

First you have to create your aws account, providing also credit card details (prepaid cards seems to be approved) – credit card will be temporarily charged 1 € and then this 1€ will be refunded. 
If I am not wrong you can make use of aws for 1 year FREE.

Once everything is ready (user registered, email verification, credit card , etc) you arrive at “AWS Management Console” in where you can select if you want to deploy an EC2 Virtual Machines (called instances in aws world). 

Except seeting up a Virtual Machine, a lot of options exist in Management Console. 

Assuming that your target was to deploy a virtual machine, you have to select the correct instance type with the required AMI (Amazon Machine Image). I used Debian AMI since I am quite familiar with Debian.

Then you have to correctly set up your instance / virtual machine (see the detailed Guide) including security group adjustments that affect inbound and outbound rules. 

Once your instance is ready you can “Launch” your virtual machine and you get a confirmation message.

PS: Don’t neglect to set up a key for remote access (select “Create a new key pair”) in order to be able to get connected to your VM using encryption. It has been said that you can not get connected to instances with out a key pair.

On your dashboard, you can see all your instances, you can start / stop them and you can get connected to them.
Connecting to your instance proved to be a headache, but I got easily connected to my instance with ssh:
ssh -i "thingit-debian.pem" admin@ec2-51-21-41-110.eu-north-1.compute.amazonaws.com
ssh -i "thingit-debian.pem" admin@thingit.online

PS1: File ‘thingit-debian.pem’ was generated by AWS and was saved to my linux machine.
PS2: If you doubt about your site / aws beeing online scan it with nmap and not ping; ping seems that is blocked by aws.

Once connected to your VM by ssh you have raw terminal access to your virtual machine and you have to set up almost everything by the terminal (apache installation, php – perl – java – nodejs installation, etc).

##Assigning an Elastic (static) IP to you instance
Guide: https://aws.plainenglish.io/assigning-a-domain-name-to-an-aws-ec2-instance-via-elastic-ip-d2234b1662cc

Step 1: Allocate an Elastic IP
Go to the AWS Management Console and navigate to the EC2 Dashboard.
From the navigation bar, click on “Elastic IPs” under “Network & Security.”
Click on “Allocate new address” and choose “Amazon’s pool of IPv4 addresses.”
Click on “Allocate” to create a new Elastic IP.

Step 2: Associate the Elastic IP with your EC2 Instance
From the Elastic IPs list, select the newly allocated Elastic IP.
Click on “Actions” and choose “Associate IP address.”
In the “Associate Elastic IP address” dialog, select your EC2 instance from the drop-down menu.
Click on “Associate” to link the Elastic IP with your EC2 instance.

Step 3: Update DNS Records with your Domain Registrar
Log in to your domain registrar’s website (where you registered your domain).
Locate the DNS management settings for your domain.
Add an “A” record with a blank or “@” hostname, pointing to the Elastic IP address you just associated with your EC2 instance.
Save the changes to update your DNS records.

Step 4: Wait for DNS Propagation
After updating your DNS records, it may take some time for the changes to propagate across the internet. DNS propagation typically takes a few minutes to several hours, depending on various factors such as TTL (Time to Live) settings and caching.

Step 5: Verify Domain Name Resolution
Open a web browser and enter your domain name (e.g., example.com) in the address bar.
If everything is configured correctly, your website or application hosted on the EC2 instance should load successfully.

Step 6: Check Domain Resolution with NSlookup
Open a terminal or command prompt on your local machine.
Type the following command, replacing “example.com” with your domain name:

From this point and after connecting my domain name to aws instance, I could use ssh with something like this:
sudo ssh -i "/home/gv/Desktop/thingit-debian.pem" admin@thingit.online

This was my instance name earlier, before Elastic IP assignment: 
http://ec2-51-20-70-223.eu-north-1.compute.amazonaws.com/

Tip1: If your instance in running , you have provided html files to /var/www/html directory and you are not able to see the html pages inside this folder, then you have to try with http instead of https.

Tip2: If you want to use a custom port in your VM (i.e for a websocket server) you have to allow inbound trafic in this port by configuring Security Group Settings.

Tip3: To copy files from your local machine to remote EC2 server you need to run scp like bellow:
sudo scp -i "XXXXXXX.pem" myfile.html admin@thingit.online:/home/admin
Better to avoid copying files directly to /var/www/html/yourfolder since scp to root folders usually is not allowed.

Tip4: It is common to have a local node.js running on server (i.e node myfile.js) that will be opened for listening at a custom port like 3000 and the 
corresponding html file, will try to fetch data from http://localhost:3000/end-point.
The term "localhost:3000" cause a lot of problems when trying to access from outside world. 
It is better to replace the localhost with public ip of your server inside your html file.
So , instead of this : fetch('http://localhost:3000/list-files')
write this : fetch('http://51.21.41.110:3000/list-files') or fetch('http://thingit.online:3000/list-files')
Also better to adjust port 3000 to be open for incoming connections at your server configuration (though i am not sure if this is required).

Tip5:  For node.js + html troubleshooting: 
Login to your server with ssh by two terminals at the same time and go to /var/www/html.....
Terminal one: run node helloworld.js (you should see a message that server is listening on port 3000)
Terminal two: run links http://localhost:3000/list-files -> you should receive the hello world message received by node.js on terminal 1. 
In this case the term localhost works ok, since both terminals are connected to the same server and thus localhost has a meaning.
This is a test to make sure that node.js server is up and running at port 3000.

Then, you can then try to see if hello world message can be delivered by node.js in external browsers. 
Keep teminal 1 open, running with node.js -serving at port 3000 
Use any external web browser and try to open: 
http://thingit.online/isotec/helloworld.html (this is a small web page with a simple button that when pressed the end point /list-files is served = Hello World message
or try directly http://thingit.online:3000/list-files (you should see Hello World message directly in your browser)

Tip6: Custom node.js scripts that are trying to save files to your web server root directories like /var/www/html/.... have write permission issues.
To overcome those issues, you have to start node.js script on your server with sudo (i.e sudo node myfile.js) to ensure write access to /var/www/html/....
Alternativelly i suppose you can adjust the /save-file and /load-file endpoints in your node.js file to use a different directory with write access for the user or for everybody.
As a general idea, being capable to write files to your root directories by a web html page that posts data to node.js , sounds a bad and vulnerable idea.

Tip6: Perform a task on remote server without keeping the ssh connection open:
sudo ssh -i "thingit-debian.pem" admin@thingit.online "cat /var/www/html/isotec/isotec2.js"

Tip7: Compare local files to server files:
sudo ssh -i "thingit-debian.pem" admin@thingit.online "cat /var/www/html/isotec/isotec2.js" |diff - isotec2.js

Tip8: Copy file to your server by local machine:
sudo scp -i "thingit-debian.pem" isotec3.js admin@thingit.online: && sudo ssh -i "thingit-debian.pem" admin@thingit.online "sudo cp -v /home/admin/isotec3.js /var/www/html/isotec/"

First command performs a secure copy using ssh with a special command called scp (usuall synthax is scp source-path target-path).
in our case target-path is admin@thingit.online:
The symbol : is equivalent to home directory of the logged in user  --> /home/admin
sudo scp -i "thingit-debian.pem" isotec3.js admin@thingit.online:   --> sudo scp -i "thingit-debian.pem" isotec3.js admin@thingit.online:/home/admin
PS: You can not perform scp to root directories like /var/www/html , and this is why we need the second command - to copy the file from home directory to the /var/www/html directory.


##WEB:COOL WEB TOOLS

##XTERM.JS
https://github.com/xtermjs/xterm.js
Library made to provide kind of terminal inside a web page. Install using npm install -g xterm

## SEASHELLS
https://seashells.io
Seashells is based on term.js and provides a web-based view-only terminal.
You can pipe data to seashells and this data will be published on a dynamic seashells page.

Usage:  echo 'Hello, Seashells!' | nc seashells.io 1337
Response: serving at https://seashells.io/v/{url}
htop | seashells --delay 5

seashells can be used to display on a web page output data of various scripts, i.e nodejs scripts.
Being able to see the results of node program.js in a web page, you don’t have to use ssh.

##Bastillion
https://github.com/bastillion-io/Bastillion
Bastilion is a full working web-based CLI, based on xterm.js
Depends on java sdk.
With Bastillion you can set up various terminals that will provide you remote CLI access.
It is like ssh but on a web page (!).


.B Installation
Download Bastillion from github: https://github.com/bastillion-io/Bastillion/releases
Download the latest tar file and extracted in a dedicated directory. Run it using ./startBastillion.sh

.B Using Bastillion
Open browser to https://<whatever ip>:8443

Login with
username:admin
password:changeme

Note: When using the AMI instance, the password is defaulted to the <Instance ID>. Also, the AMI uses port 443 as in https://<Instance IP>:443


##More cool resources based on xterm.js
https://github.com/xtermjs/xterm.js#real-world-uses
Check rtty: https://github.com/zhaojh329/rtty

##DNS Hosting
https://www.hostingkey.com/dnhosting.php
Register to hostingkey name server your web site (not obtained by hostingkey).


