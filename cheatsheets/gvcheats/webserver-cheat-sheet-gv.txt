WEBSERVER:BASICS: CHEAT SHEET by gv

##APACHE2
To be added - chapter on how to manually install and configure apache2

##PHP
In Debian 12 , the php version available is 8.2
All bellow commands should be run as root or with sudo.
Source: https://www.installconfig.com/doku.php?id=configure_ubuntu_server_20_04_host_nextcloud_hub_21

Step 1: apt install php libapache2-mod-php libapache2-mod-fcgid php-fpm 

Step 2: write a simple test.php file inside /var/www/html folder, containing just those two lines:
<?php
phpinfo();

Step 3: open a php interactive shell with php -a and run phpinfo();
If you see output , php is installed (as a language).

Step 4: geany /etc/apache2/apache2.conf
To the end of file , add this line:
SetHandler application/x-httpd-php

Step 5: Disable older php modules and load new php modules
a2dismod mpm_event
a2enmod mpm_prefork
a2enmod php8.2
a2enmod proxy_fcgi setenvif
a2enconf php8.2-fpm
a2query -m php8.2 
#a2query is just a question to the system / query - you expect to get a positive confirmation in your query


Step 6: Edit the php configuration file and comment out / disable the following lines:
geany /etc/apache2/mods-enabled/php8.2.conf
# Running PHP scripts in user directories is disabled by default
# 
# To re-enable PHP in user directories comment the following lines
# (from <IfModule ...> to </IfModule>.) Do NOT set it to On as it
# prevents .htaccess files from disabling it.
#<IfModule mod_userdir.c>
#    <Directory /home/*/public_html>
#        php_admin_flag engine Off
#    </Directory>
#</IfModule>

Step 7: systemctl restart apache2

Step 8: Navigate to http://127.0.0.1/test.php and everything should work ok.
PS: Considering that you had a working apache2 server , meaning that you have a default index.html file and meaning that visiting http://127.0.0.1 works ok.

Step 9: It seems good option to install some php extensions in your system:
sudo apt install php-gd php-mysql php-curl php-mbstring
sudo apt install php-intl php-gmp php-bcmath php-xml phpunit
sudo apt install libapache2-mod-php php-zip php-imagick php-apcu

#PHP Composer
composer is a kind of php libraries installer.

.B Installing Composer according to https://getcomposer.org/
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

If everything is ok, you should receive a success confirmation

Last step: sudo mv composer.phar /usr/local/bin/composer


##PHP MODBUS
As of today (19.10.23) there is a Github Project capable to provide libraries for TCP Modbus Communication.
https://github.com/aldas/modbus-tcp-client

.B Use PHP built-in webserver for PLC Communication

sudo apt-get install php-mbstring
sudo apt install php-curl
sudo apt install php-xml
sudo apt install phpunit
sudo service apache2 restart
composer update OR sudo /home/gv/composer.phar update
composer require aldas/modbus-tcp-client

git clone https://github.com/aldas/modbus-tcp-client.git
cd modbus-tcp-client
composer install
cd modbusâ€”tcp-client/examples && touch .allow-change

File .allow-change is used as a flag, to allow users to change IP address / IP Port.
Without this file present IP address and IP Port of webserver will be grayed out / locked/hardcoded in index.php file.
File .allow-change can be empty.

.B Run the webserver
php -S localhost:8080 -t examples/

-S switch: Run Built-in php webserver
-t switch: Define the root directory of PHP webserver
Now open http://localhost:8080 in browser. See additional query parameters from index.php.

Tip:
aldas "Examples" folder has index.php inside. 
index.php is used with php built-in web server to test out communication with our own PLCs.


