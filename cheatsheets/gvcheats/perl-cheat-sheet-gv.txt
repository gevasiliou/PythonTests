PERL:CHEATSHEET - ONELINERS & DOCUMENTATION
http://perldoc.perl.org/perlrequick.html  # PERL REGULAR EXPRESSIONS QUICK START
http://perldoc.perl.org/perlretut.html    # PERL REGULAR EXPRESSIONS TUTORIAL
http://perldoc.perl.org/perlvar.html      # PERL PREDEFINED VARIABLES
http://perldoc.perl.org/perlrun.html      # PERL INTERPRETER RUN OPTIONS - COMMAND LINE SWITCHES
http://www.catonmat.net/blog/perl-one-liners-explained-part-six/
http://www.catonmat.net/download/perl1line.txt
https://github.com/pkrumins/perl1line.txt
http://www.catonmat.net/blog/perl-book/
http://nostarch.com/perloneliners
http://www.strawberryperl.com/

---------------------------------------------------------------------------------------------------------------------------------------

PERL:CLI OPTIONS AND INTERNAL VARIABLES (see perlrun)
-l        #Cause a new line to be printed by 'print'. Without -l no new line is printed unless "\n" is given (like printf)
-e        #One line script 
-n        #Similar to sed -n = do not print unless condition 
-p        #Somehow similar to sed -n '/pattern/p' = force printing.
-a        #autosplit record $_ to array F (whitespace separation). perl -alne 'print $F[0]' <<<"one two three"   ----> one
-F        #Field delimiter for autosplit. must be defined before -e. can be like -F/delim/ or "delim" or 'delim' or $'delim'
-0777     #Paragraph slurp mode. All lines are swallowed and treated as one big text.

$.        #line number for current file handle and can be used for given input file like, i.e perl -pe 's/555/666/ if $. == 2' hello.txt
$_        #Is the "default" variable , similar to $0 of awk (current record for a line by line read)
$&        #Refers to regex "matching" part. Used in s/old/new replacements or like '/[|]../;print $&' <<<"europe|EU" --> |EU  
$`        #Regex prematch - prints everything prior to pattern: '/[|]../;print $`' <<<"europe|EU" ---> prints europe
$'        #Regex postmatch - after matched pattern: "/.*[|]/;print $'" <<<"europe|EU" ---> prints EU
$1        #Refers usually to regex capture groups , and is readonly.I.E 'print $2 if /(regex1)(regex2)/'. Valid also in s/old/new
$+        #Refers to last regex group: "/(.*)[|](..)/; print $+" <<<"europe|EU"     ---> prints EU

Tips: 
Most of the Perl Vars require perl -lne to be enclosed with single quotes (especially $1,$2,etc). Double quotes seems not to work wiht i.e $1.
More predifined perl vars : http://perldoc.perl.org/perlvar.html
---------------------------------------------------------------------------------------------------------------------------------

PERL:REPLACEMENTS
##CLASSIC SED ALIKE REPLACEMENT
Use the classic bash/sed format but much better than sed.
in sed it is common operation like 's/\n//g' (delete all \n) to fail. 
In Perl works fine (some times -0777 is required = slurp all input at once and process it all together)
 
Actually the above perl example uses the s/pattern/replace format of sed , which works in exactly the same way as sed.

a="http://unix.stackexchange.com/questions/ask"
perl -pe 's#n#N#' <<<"$a" -----> http://uNix.stackexchange.com/questions/ask		#a simple replacement, using a different delimiter
perl -pe 's#n#N#g' <<<"$a" ----> http://uNix.stackexchaNge.com/questioNs/ask		#g = global replacements,like sed /g

##REPLACEMENT USING REGEXP AND NON-greedy / lazy operator
Perl has great support to non-greedy regex groups .
sed -r supports extended regexp  but does not support not-greedy operator (.*?)

a="http://unix.stackexchange.com/questions/ask"
perl -pe 's#(.*//)(.*?)(/.*)#\2#' <<<"$a" ---> unix.stackexchange.com  			#mind the non-greedy operator in group 2
sed -r 's#(.*//)(.*?)(/.*)#\2#' <<<"$a" ---> unix.stackexchange.com/questions	#non-greedy operator ignored by sed.

##REGEX NON GREEDY OPERATOR EQUIVALENT BY CHAZELAS:
http://unix.stackexchange.com/questions/49601/how-to-reduce-the-greed-of-a-regular-expression-in-awk
(.*?)(;) = match everything up to first ;  <===> (.[^;]*)(;)  or (.[^;]*;) if you want ; to be included in the match


##ANOTHER EXAMPLE WITH REGEX GROUPS:
$ echo "$a" && perl -pe "s/(.*?)({)(.*?)(})(.*)/\1\{\2\3\4\}\5/" <<<"$a"
static double    testVar1          [2][8]  = {0.0}    ;  /* This is for testing var 1 */
static double    testVar1          [2][8]  = {{0.0}}    ;  /* This is for testing var 1 */ 

Alternatives:
perl -pe's/ (?: \[ [^]]+ \] ){2} \s*=\s* \K ( \{ [^}]+ \} )/{$1}/x' in > out
\w+\s*(?:\[\d+\]){2}\s*=\s*\K\{([\d.]*)\}
sed -i -r 's/(.*\[[0-9]+\][[0-9]+\].*)(\{0.0\})(.*)/\1{\2}\3/'

Tip: If the regex described does not make a perfect match with input , then the whole input string is returned.

##BSD REPLACEMENTS
Perl replacements work really good even in BSD.

Example: Each line should be terminated with \r\n , but lines only with \n must be concatenated with previous line
Made easily with PERL, while non-gnu sed would have million of warnings:

echo -ne "abc\r\ndef\nijk\r\nlmn\r\n" |cat -vte
abc^M$
def$
ijk^M$
lmn^M$

echo -ne "abc\r\ndef\nijk\r\nlmn\r\n" |perl -pe "s/\r\n/\0/g;s/\n//g;s/\0/\r\n/g" |cat -vte
abc^M$
defijk^M$
lmn^M$

##HTML TAGS REPLACEMENT
$ echo "$ht" |perl -0777 -pe "s/\n/\0/g;s/<style>.*<\/style>/$st/g;s/\0/\n/g"
Where $ht is a multline html code (lines separated with \n), and $st is some multiline replacement text also including \n
See http://stackoverflow.com/questions/42739324/remove-a-specific-tag-and-replace-it-with-awk/42741305#42741305

Notice: Without -0777 this will not work. The 0777 instructs perl to slurp the whole file and process it all together.
Without -0777 perl will operate per each input line, as all the usual tools (i.e sed).
Another alternative would be to describe the pattern like <style>\n.*\n.*\n<\/style>\n
This would also work because the whole file is loaded from perl with 0777, and will NOT work with sed easily since sed works per input line.
This is why sed has a set of commands to append data to pattern space / buffer space.

##REPLACEMENT WITH BACK REFERENCE ($1 OR $&)
Backreferences in Extended Regex are available with \1,\2 etc. On Perl we have $1,$2 , etc but also the \1,\2 works.

echo "...." |perl -pe 's/Q([0-9])/\nQ\1/g' #Inserts a new line before Q and then appends group1
EQUALS TO 
perl -pe 's/(Q\d)/\n$1/g' #Q has been included in the group , mind the use of $1 as backref to replaced part
OR EVEN TO 
perl -pe 's/Q\d/\n$&/g' #no capture group usage - \d = digits = [0-9] , $& is backref the whole replaced part
-------------------------------------------------------------------------------------------------------------------------------------

PERL:REGEXP & PCRE
Regex Tester: http://rubular.com/r/jpSVUvCGHr
The Stack Overflow Regular Expressions FAQ :
http://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean/22944075#22944075
Regex Online Tester : https://regex101.com/ #Select PCRE = Perl - Works even with grep -Po

As a general idea all regex tools work in a line by line basis. To capture parts of the line (like grep -o) in most cases is better
to use a classic sed approach (s/old/new) in which you will isolate the part of the line you want using regexp groups and backreferences

All Regexes by default are applied from left to right. So regex '.*' match all chars in the line , but '.*a' match any char multiple times plus an 'a'.

All multipliers (*,+,?) by default apply on the last regex metasymbol before the multiplier. 
You need "grouping" to apply a multiplier to a more complex/grouped regex like IP greping in bellow example.

For example regex '.a+' will match any string with 'anychar+a*one or more times':

grep -E '.a+' <<<$'da\ndaaa\ndbbb\nddddaaa\n'   --->  matches da & daaa & ddddaaa - doesnot match dbbb. 
dddaaa is matched because '.a+' (daaa) is included in the last line within dddaaa. If you apply -Eo last line will return 'daaa' 
You can provide grep -w (word match) to limit regex to match on word boundaries only and thus dddaaa will not be matched. 
(grep -w <==> egrep '\<.a+\>' <==> egrep '\b.a+\b' )
We use to apply -w when we generally want to avoid substrings (i.e grep -w '11' will match 11 alone (as a word) but will not match 111.
A simple grep '11' will match both 11 and 111 , or even 10011, or even 'some11' and generally WHATEVER includes '11'.

##GREP IP OUT OF TEXT
grep -Po '([0-9]+[.])+' <<<$'myip="192.168.1.1"'   ---> 192.168.1.1
Mind the last '+' multiplier that is applied to the whole ( ) captured group. Without this only '192.' is returned.

##\w and \s abbreviations for words ans space
echo $'Unites State | California | UNIX | ABC DE' |perl -pe 's/[a-zA-Z]+[[:space:]]+[a-zA-Z]+/\"$&\"/g'
"Unites State" | California | UNIX | "ABC DE"    #adds double quotes in entries with space inbetween
Short PCRE Alternative : perl -pe 's/\w+\s+\w+/\"$&\"/g' 

##NON CAPTURING GROUPS (applicable to Perl and other regex engines)
'(?:http|ftp)(.*) - The http/ftp is grouped but not captured , thus \1 will refer to the next group (.*)=whatever follows http/ftp

##GREP FIRST NUMBER OF LINE .
grep -Po '^.*?\K\d+'   #*=one char zero or more , ? = non greedy , \K=forget previous, \d+ = [0-9]+ , +:1 or more
line one 333 more --> 333
456 another line  --> 456

Perl Equivalent: perl -lne 'print $& if /\d+/' inputfile

##GREP NUMBERS :
grep -o '^[0-9]*' <<<"345.123.155.069"  --> 345   #Multiplier * applies to [0-9] only. Dot does not belong in [0-9].
egrep -o '^[0-9]+' #One or more number up to the non-number character (=first dot)
egrep -o '^[0-9]{3}'  #Only three first numbers

perl -lne 'print if /^[0-9]+/' <<<$'345.123.155.069\nsome text\n'              ---> 345.123.155.069 (correct line match)
perl -lne 'print if /(^[0-9]+)/' <<<$'345.123\nsome text\n234.text'           ---> Prints line1 and 3 (345.123 and 234.text)

perl -ne 'print if /^[0-9]*/' <<<$'345.123.155.069\nsome text\n'              ---> both lines printed since * means zero or more
perl -lne '/(^[0-9]+)(.*)/;print $1' <<<$'345.123.155.069\nsome text'         ---> 345 and 345 (Prints matched string for every input line!)

perl -0777 -ne '/(^[0-9]+)(.*)/;print $1' <<<$'345.123.155.069\nsome text'    ---> 345 (requires -0777)

perl -lne 'print $1 if /(^[0-9]+)/' <<<$'345.123\nsome text\n234.text'        ---> 345 and 234 in new line
perl -lne 'print $2 if /(^[0-9]+)(.*)/' <<<$'345.123\nsome text\n234.hello'   ---> Line1 = 123, Line 2 = hello 

##GREP DECIMAL NUMBERS AND ISOLATE THE INT PART
$ c="scalar throughput:last11730.559888477 TestDmaMac4.sink.udpApp[0]"
$ egrep -o '[0-9]+[.][0-9]' <<<"$c" |egrep -o '[0-9]+[^.]'   ---> 11730 #First grep will isolate the floating number , second grep will isolate the int part.
$ perl -pe 's/(.*?)([0-9]+)(\.[0-9]+.*)/\2/' <<<"$c"         ---> 11730 #using the lazy operator ?
$ sed -r 's/(.*[^0-9.])([0-9]+)(\.[0-9]+.*)/\2/' <<<"$c"     ---> 11730 #sed does not have lazy operator thus we simulate this with negation

##GREP OPERATIONS WITH PERL
For a variable like 
var=$'+0000 [exec-12056], uri=/riokc95758/, duration(ms)=422'

To get everything after and including uri:
perl -ne 'print /(uri=)(.*)/' <<<"$var"    --->uri=/riokc95758/, duration(ms)=422

To get only uri value (grep -o)
grep -Po 'uri=\K.[^,]*' <<<"$var"
perl -lne '/(uri=)(.*),/;print $2' <<<"$var"    ---> /riokc95758/  This works ok for a single line of text. 
perl -lne '/(uri=)(.*),/;print $2' <<<$'exec-12056, uri=/riokc95758/, duration(ms)=422\nexec-12056, uri=/george/, duration(ms)=453' #prints /riock95758/ and /george/
perl -lne '/(uri=)(.*),/;print $2' <<<$'uri=/riokc95758/, duration(ms)=422\nexec=/george/, duration(ms)=453' #This prints two times /riock95758/!
The best solution for perl is 
perl -lne 'print $2 if /(uri=)(.*),/' <<<$'uri=/riokc95758/, duration(ms)=422\nexec=/george/, duration(ms)=453'  #Will print correctly for the matching line the text /riock95758/

To print uri and duration values (multiple grep -o)
sed -r "s/(.*uri=)(.[^,]*)(.*duration\(ms\)=)(.[^,]*)(.*)/\2,\4/" <<<"$var"  
perl -ne '/(uri=)(.*)(duration\(ms\)=)(.*)/;print $2,$4' <<<"$var"    ---> /riokc95758/, 422

Or even better:
perl -ne 'print $2,$4 if /(uri=)(.*)(duration\(ms\)=)(.*)/' <<<$'uri=/riokc95758/, duration(ms)=422\nexec=/george/, duration(ms)=453'
This will print /riokc95758/, 422 for the first line but NOTHING on the second line, since second line has 'duration' but not 'uri',thus regex fails.

If we need to print both uri and duration but also separate uri or duration (whatever is available) we should built something like:
perl -lne 'print $2 if /(uri=)(.*),/;print $2 if /(duration\(ms\)=)(.*)/' <<<$'uri=/riokc95758/, duration(ms)=422\nexec=/george/, duration(ms)=453'
#Output
/riokc95758/                           
422  #Mind the new line due to the different print. Better to remove -l option and print a literall "\n" at the end
453


##PERL MATCHING / GREP MORE EXAMPLES BY http://perldoc.perl.org/perlrequick.html and http://perldoc.perl.org/perlretut.html
"Hello World" =~ /World/;  # matches
print "It matches\n" if "Hello World" =~ /World/;
print "It doesn't match\n" if "Hello World" !~ /World/;
$_ = "Hello World";print "It matches\n" if /World/;   #If you're matching against $_ , the $_ =~ part can be omitted:
$foo = 'house'
'cathouse' =~ /cat$foo/;   # matches 
'housecat' =~ /${foo}cat/; # matches

In regex matching default delimiters /regex/ can be changed to any char using m in front. Usefull to avoid escaping of /
"Hello World" =~ m!World!;   # matches, delimited by '!', equivalent to =~ /World/
"/usr/bin/perl" =~ /\/usr\/bin\/perl/;  # matches   <====> "/usr/bin/perl" =~ m{/perl}; (or m"/perl" or any custom delimiter)
perl -lne 'print $& if /uri=.[^,]*/'  <===> perl -lne 'print $& if m{uri=.[^,]*}'  #$& = special var refering to the matched part



-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
PERL:Useful One-Line Scripts for Perl                                                                      Dec 03 2013 | version 1.10
--------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

Compiled by Peteris Krumins (peter@catonmat.net, @pkrumins on Twitter)
http://www.catonmat.net -- good coders code, great reuse

Latest version of this file is always at:

    http://www.catonmat.net/download/perl1line.txt


PERL:FILE SPACING 
------------

## DOUBLE SPACE A FILE
perl -pe '$\="\n"'
perl -pe 'BEGIN { $\="\n" }'
perl -pe '$_ .= "\n"'
perl -pe 's/$/\n/'
perl -nE 'say'

## DOUBLE SPACE A FILE, except the blank lines
perl -pe '$_ .= "\n" unless /^$/'
perl -pe '$_ .= "\n" if /\S/'

## TRIPLE SPACE A FILE
perl -pe '$\="\n\n"'
perl -pe '$_.="\n\n"'

## N-space a file
perl -pe '$_.="\n"x7'

## ADD A BLANK LINE BEFORE EVERY LINE
perl -pe 's//\n/'

## REMOVE ALL BLANK LINES
perl -ne 'print unless /^$/'
perl -lne 'print if length'
perl -ne 'print if /\S/'

## REMOVE ALL CONSECUTIVE BLANK LINES, leaving just one
perl -00 -pe ''
perl -00pe0

## COMPRESS/expand all blank lines into N consecutive ones
perl -00 -pe '$_.="\n"x4'

## FOLD A FILE SO THAT EVERY SET OF 10 lines becomes one tab-separated line
perl -lpe '$\ = $. % 10 ? "\t" : "\n"'


PERL:LINE NUMBERING
--------------

## NUMBER ALL LINES IN A FILE
perl -pe '$_ = "$. $_"'

## NUMBER ONLY NON-empty lines in a file
perl -pe '$_ = ++$a." $_" if /./'

## NUMBER AND PRINT ONLY NON-empty lines in a file (drop empty lines)
perl -ne 'print ++$a." $_" if /./'

## NUMBER ALL LINES BUT PRINT LINE NUMBERS ONLY NON-empty lines
perl -pe '$_ = "$. $_" if /./'

## NUMBER ONLY LINES THAT MATCH A PATTERN, print others unmodified
perl -pe '$_ = ++$a." $_" if /regex/'

## NUMBER AND PRINT ONLY LINES THAT MATCH A PATTERN
perl -ne 'print ++$a." $_" if /regex/'

## NUMBER ALL LINES, but print line numbers only for lines that match a pattern
perl -pe '$_ = "$. $_" if /regex/'

## NUMBER ALL LINES IN A FILE USING A CUSTOM FORMAT (emulate cat -n)
perl -ne 'printf "%-5d %s", $., $_'

## PRINT THE TOTAL NUMBER OF LINES IN A FILE (emulate wc -l)
perl -lne 'END { print $. }'
perl -le 'print $n=()=<>'
perl -le 'print scalar(()=<>)'
perl -le 'print scalar(@foo=<>)'
perl -ne '}{print $.'
perl -nE '}{say $.'

## PRINT THE NUMBER OF NON-empty lines in a file
perl -le 'print scalar(grep{/./}<>)'
perl -le 'print ~~grep{/./}<>'
perl -le 'print~~grep/./,<>'
perl -E 'say~~grep/./,<>'

## PRINT THE NUMBER OF EMPTY LINES IN A FILE
perl -lne '$a++ if /^$/; END {print $a+0}'
perl -le 'print scalar(grep{/^$/}<>)'
perl -le 'print ~~grep{/^$/}<>'
perl -E 'say~~grep{/^$/}<>'

## PRINT THE NUMBER OF LINES IN A FILE THAT MATCH A PATTERN (emulate grep -c)
perl -lne '$a++ if /regex/; END {print $a+0}'
perl -nE '$a++ if /regex/; END {say $a+0}'


PERL:CALCULATIONS
------------

## CHECK IF A NUMBER IS A PRIME
perl -lne '(1x$_) !~ /^1?$|^(11+?)\1+$/ && print "$_ is prime"'

## PRINT THE SUM OF ALL THE FIELDS ON A LINE
perl -MList::Util=sum -alne 'print sum @F'

## PRINT THE SUM OF ALL THE FIELDS ON ALL LINES
perl -MList::Util=sum -alne 'push @S,@F; END { print sum @S }'
perl -MList::Util=sum -alne '$s += sum @F; END { print $s }'

## SHUFFLE ALL FIELDS ON A LINE
perl -MList::Util=shuffle -alne 'print "@{[shuffle @F]}"'
perl -MList::Util=shuffle -alne 'print join " ", shuffle @F'

## FIND THE MINIMUM ELEMENT ON A LINE
perl -MList::Util=min -alne 'print min @F'

## FIND THE MINIMUM ELEMENT OVER ALL THE LINES
perl -MList::Util=min -alne '@M = (@M, @F); END { print min @M }'
perl -MList::Util=min -alne '$min = min @F; $rmin = $min unless defined $rmin && $min > $rmin; END { print $rmin }'

## FIND THE MAXIMUM ELEMENT ON A LINE
perl -MList::Util=max -alne 'print max @F'

## FIND THE MAXIMUM ELEMENT OVER ALL THE LINES
perl -MList::Util=max -alne '@M = (@M, @F); END { print max @M }'

## REPLACE EACH FIELD WITH ITS ABSOLUTE VALUE
perl -alne 'print "@{[map { abs } @F]}"'

## FIND THE TOTAL NUMBER OF FIELDS (words) on each line
perl -alne 'print scalar @F'

## PRINT THE TOTAL NUMBER OF FIELDS (words) on each line followed by the line
perl -alne 'print scalar @F, " $_"'

## FIND THE TOTAL NUMBER OF FIELDS (words) on all lines
perl -alne '$t += @F; END { print $t}'

## PRINT THE TOTAL NUMBER OF FIELDS THAT MATCH A PATTERN
perl -alne 'map { /regex/ && $t++ } @F; END { print $t }'
perl -alne '$t += /regex/ for @F; END { print $t }'
perl -alne '$t += grep /regex/, @F; END { print $t }'

## PRINT THE TOTAL NUMBER OF LINES THAT MATCH A PATTERN
perl -lne '/regex/ && $t++; END { print $t }'

## PRINT THE NUMBER PI TO N DECIMAL PLACES
perl -Mbignum=bpi -le 'print bpi(n)'

## PRINT THE NUMBER PI TO 39 decimal places
perl -Mbignum=PI -le 'print PI'

## PRINT THE NUMBER E TO N DECIMAL PLACES
perl -Mbignum=bexp -le 'print bexp(1,n+1)'

## PRINT THE NUMBER E TO 39 decimal places
perl -Mbignum=e -le 'print e'

## PRINT UNIX TIME (seconds since Jan 1, 1970, 00:00:00 UTC)
perl -le 'print time'

## PRINT GMT (Greenwich Mean Time) and local computer time
perl -le 'print scalar gmtime'
perl -le 'print scalar localtime'

## PRINT LOCAL COMPUTER TIME IN H:M:S format
perl -le 'print join ":", (localtime)[2,1,0]'

## PRINT YESTERDAY's date
perl -MPOSIX -le '@now = localtime; $now[3] -= 1; print scalar localtime mktime @now'

## PRINT DATE 14 months, 9 days and 7 seconds ago
perl -MPOSIX -le '@now = localtime; $now[0] -= 7; $now[4] -= 14; $now[7] -= 9; print scalar localtime mktime @now'

## PREPEND TIMESTAMPS TO STDOUT (GMT, localtime)
tail -f logfile | perl -ne 'print scalar gmtime," ",$_'
tail -f logfile | perl -ne 'print scalar localtime," ",$_'

## CALCULATE FACTORIAL OF 5
perl -MMath::BigInt -le 'print Math::BigInt->new(5)->bfac()'
perl -le '$f = 1; $f *= $_ for 1..5; print $f'

## CALCULATE GREATEST COMMON DIVISOR (GCM)
perl -MMath::BigInt=bgcd -le 'print bgcd(@list_of_numbers)'

## CALCULATE GCM OF NUMBERS 20 and 35 using Euclid's algorithm
perl -le '$n = 20; $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $m'

## CALCULATE LEAST COMMON MULTIPLE (LCM) of numbers 35, 20 and 8
perl -MMath::BigInt=blcm -le 'print blcm(35,20,8)'

## CALCULATE LCM OF 20 and 35 using Euclid's formula: n*m/gcd(n,m)
perl -le '$a = $n = 20; $b = $m = 35; ($m,$n) = ($n,$m%$n) while $n; print $a*$b/$m'

## GENERATE 10 random numbers between 5 and 15 (excluding 15)
perl -le '$n=10; $min=5; $max=15; $, = " "; print map { int(rand($max-$min))+$min } 1..$n'

## FIND AND PRINT ALL PERMUTATIONS OF A LIST
perl -MAlgorithm::Permute -le '$l = [1,2,3,4,5]; $p = Algorithm::Permute->new($l); print @r while @r = $p->next'

## GENERATE THE POWER SET
perl -MList::PowerSet=powerset -le '@l = (1,2,3,4,5); for (@{powerset(@l)}) { print "@$_" }'

## CONVERT AN IP ADDRESS TO UNSIGNED INTEGER
perl -le '$i=3; $u += ($_<<8*$i--) for "127.0.0.1" =~ /(\d+)/g; print $u'
perl -le '$ip="127.0.0.1"; $ip =~ s/(\d+)\.?/sprintf("%02x", $1)/ge; print hex($ip)'
perl -le 'print unpack("N", 127.0.0.1)'
perl -MSocket -le 'print unpack("N", inet_aton("127.0.0.1"))'

## CONVERT AN UNSIGNED INTEGER TO AN IP ADDRESS
perl -MSocket -le 'print inet_ntoa(pack("N", 2130706433))'
perl -le '$ip = 2130706433; print join ".", map { (($ip>>8*($_))&0xFF) } reverse 0..3'
perl -le '$ip = 2130706433; $, = "."; print map { (($ip>>8*($_))&0xFF) } reverse 0..3'


PERL: STRING AND ARRAY CREATION
----------------------------------

## GENERATE AND PRINT THE ALPHABET
perl -le 'print a..z'
perl -le 'print ("a".."z")'
perl -le '$, = ","; print ("a".."z")'
perl -le 'print join ",", ("a".."z")'

## GENERATE AND PRINT ALL THE STRINGS FROM "a" to "zz"
perl -le 'print ("a".."zz")'
perl -le 'print "aa".."zz"'

## CREATE A HEX LOOKUP TABLE
@hex = (0..9, "a".."f")

## CONVERT A DECIMAL NUMBER TO HEX USING @hex lookup table
perl -le '$num = 255; @hex = (0..9, "a".."f"); while ($num) { $s = $hex[($num%16)&15].$s; $num = int $num/16 } print $s'
perl -le '$hex = sprintf("%x", 255); print $hex'
perl -le '$num = "ff"; print hex $num'

## GENERATE A RANDOM 8 character password
perl -le 'print map { ("a".."z")[rand 26] } 1..8'
perl -le 'print map { ("a".."z", 0..9)[rand 36] } 1..8'

## CREATE A STRING OF SPECIFIC LENGTH
perl -le 'print "a"x50'

## CREATE A REPEATED LIST OF ELEMENTS
perl -le '@list = (1,2)x20; print "@list"'

## CREATE AN ARRAY FROM A STRING
@months = split ' ', "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"
@months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/

## CREATE A STRING FROM AN ARRAY
@stuff = ("hello", 0..9, "world"); $string = join '-', @stuff

## FIND THE NUMERIC VALUES FOR CHARACTERS IN THE STRING
perl -le 'print join ", ", map { ord } split //, "hello world"'

## CONVERT A LIST OF NUMERIC ASCII VALUES INTO A STRING
perl -le '@ascii = (99, 111, 100, 105, 110, 103); print pack("C*", @ascii)'
perl -le '@ascii = (99, 111, 100, 105, 110, 103); print map { chr } @ascii'

## GENERATE AN ARRAY WITH ODD NUMBERS FROM 1 to 100
perl -le '@odd = grep {$_ % 2 == 1} 1..100; print "@odd"'
perl -le '@odd = grep { $_ & 1 } 1..100; print "@odd"'

## GENERATE AN ARRAY WITH EVEN NUMBERS FROM 1 to 100
perl -le '@even = grep {$_ % 2 == 0} 1..100; print "@even"'

## FIND THE LENGTH OF THE STRING
perl -le 'print length "one-liners are great"'

## FIND THE NUMBER OF ELEMENTS IN AN ARRAY
perl -le '@array = ("a".."z"); print scalar @array'
perl -le '@array = ("a".."z"); print $#array + 1'


PERL:TEXT CONVERSION AND SUBSTITUTION
--------------------------------

## ROT13 a string
'y/A-Za-z/N-ZA-Mn-za-m/'

## ROT 13 a file
perl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file

## BASE64 encode a string
perl -MMIME::Base64 -e 'print encode_base64("string")'
perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file

## BASE64 decode a string
perl -MMIME::Base64 -le 'print decode_base64("base64string")'
perl -MMIME::Base64 -ne 'print decode_base64($_)' file

## URL-escape a string
perl -MURI::Escape -le 'print uri_escape($string)'

## URL-unescape a string
perl -MURI::Escape -le 'print uri_unescape($string)'

## HTML-encode a string
perl -MHTML::Entities -le 'print encode_entities($string)'

## HTML-decode a string
perl -MHTML::Entities -le 'print decode_entities($string)'

## CONVERT ALL TEXT TO UPPERCASE
perl -nle 'print uc'
perl -ple '$_=uc'
perl -nle 'print "\U$_"'

## CONVERT ALL TEXT TO LOWERCASE
perl -nle 'print lc'
perl -ple '$_=lc'
perl -nle 'print "\L$_"'

## UPPERCASE ONLY THE FIRST WORD OF EACH LINE
perl -nle 'print ucfirst lc'
perl -nle 'print "\u\L$_"'

## INVERT THE LETTER CASE
perl -ple 'y/A-Za-z/a-zA-Z/'

## CAMEL CASE EACH LINE
perl -ple 's/(\w+)/\u$1/g'
perl -ple 's/(?<!['])(\w+)/\u\1/g'

## STRIP LEADING WHITESPACE (spaces, tabs) from the beginning of each line
perl -ple 's/^[ \t]+//'
perl -ple 's/^\s+//'

## STRIP TRAILING WHITESPACE (space, tabs) from the end of each line
perl -ple 's/[ \t]+$//'

## STRIP WHITESPACE FROM THE BEGINNING AND END OF EACH LINE
perl -ple 's/^[ \t]+|[ \t]+$//g'

## CONVERT UNIX NEWLINES TO DOS/Windows newlines
perl -pe 's|\n|\r\n|'

## CONVERT DOS/Windows newlines to UNIX newlines
perl -pe 's|\r\n|\n|'

## CONVERT UNIX NEWLINES TO MAC NEWLINES
perl -pe 's|\n|\r|'

## SUBSTITUTE (find and replace) "foo" with "bar" on each line
perl -pe 's/foo/bar/'

## SUBSTITUTE (find and replace) all "foo"s with "bar" on each line
perl -pe 's/foo/bar/g'

## SUBSTITUTE (find and replace) "foo" with "bar" on lines that match "baz"
perl -pe '/baz/ && s/foo/bar/'

## BINARY PATCH A FILE (find and replace a given array of bytes as hex numbers)
perl -pi -e 's/\x89\xD8\x48\x8B/\x90\x90\x48\x8B/g' file


PERL:SELECTIVE PRINTING AND DELETING OF CERTAIN LINES
------------------------------------------------

## PRINT THE FIRST LINE OF A FILE (emulate head -1)
perl -ne 'print; exit'

## PRINT THE FIRST 10 lines of a file (emulate head -10)
perl -ne 'print if $. <= 10'
perl -ne '$. <= 10 && print'
perl -ne 'print if 1..10'

## PRINT THE LAST LINE OF A FILE (emulate tail -1)
perl -ne '$last = $_; END { print $last }'
perl -ne 'print if eof'

## PRINT THE LAST 10 lines of a file (emulate tail -10)
perl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END { print @a }'

## PRINT ONLY LINES THAT MATCH A REGULAR EXPRESSION
perl -ne '/regex/ && print'

## PRINT ONLY LINES THAT DO NOT MATCH A REGULAR EXPRESSION
perl -ne '!/regex/ && print'

## PRINT THE LINE BEFORE A LINE THAT MATCHES A REGULAR EXPRESSION
perl -ne '/regex/ && $last && print $last; $last = $_'

## PRINT THE LINE AFTER A LINE THAT MATCHES A REGULAR EXPRESSION
perl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/'

## PRINT LINES THAT MATCH REGEX AAA AND REGEX BBB IN ANY ORDER
perl -ne '/AAA/ && /BBB/ && print'

## PRINT LINES THAT DON't match match regexes AAA and BBB
perl -ne '!/AAA/ && !/BBB/ && print'

## PRINT LINES THAT MATCH REGEX AAA FOLLOWED BY REGEX BBB FOLLOWED BY CCC
perl -ne '/AAA.*BBB.*CCC/ && print'

## PRINT LINES THAT ARE 80 chars or longer
perl -ne 'print if length >= 80'

## PRINT LINES THAT ARE LESS THAN 80 chars in length
perl -ne 'print if length < 80'

## PRINT ONLY LINE 13
perl -ne '$. == 13 && print && exit'

## PRINT ALL LINES EXCEPT LINE 27
perl -ne '$. != 27 && print'
perl -ne 'print if $. != 27'

## PRINT ONLY LINES 13, 19 and 67
perl -ne 'print if $. == 13 || $. == 19 || $. == 67'
perl -ne 'print if int($.) ~~ (13, 19, 67)' 

## PRINT ALL LINES BETWEEN TWO REGEXES (including lines that match regex)
perl -ne 'print if /regex1/../regex2/'
perl -ne'print if /foo/i' file.txt    #Case insensitive

## PRINT ALL LINES FROM LINE 17 to line 30
perl -ne 'print if $. >= 17 && $. <= 30'
perl -ne 'print if int($.) ~~ (17..30)'
perl -ne 'print if grep { $_ == $. } 17..30'

## PRINT THE LONGEST LINE
perl -ne '$l = $_ if length($_) > length($l); END { print $l }'

## PRINT THE SHORTEST LINE
perl -ne '$s = $_ if $. == 1; $s = $_ if length($_) < length($s); END { print $s }'

## PRINT ALL LINES THAT CONTAIN A NUMBER
perl -ne 'print if /\d/'

## FIND ALL LINES THAT CONTAIN ONLY A NUMBER
perl -ne 'print if /^\d+$/'

## PRINT ALL LINES THAT CONTAIN ONLY CHARACTERS
perl -ne 'print if /^[[:alpha:]]+$/

## PRINT EVERY SECOND LINE
perl -ne 'print if $. % 2'

## PRINT EVERY SECOND LINE, starting the second line
perl -ne 'print if $. % 2 == 0'

## PRINT ALL LINES THAT REPEAT
perl -ne 'print if ++$a{$_} == 2'

## PRINT ALL UNIQUE LINES
perl -ne 'print unless $a{$_}++'

## PRINT THE FIRST FIELD (word) of every line (emulate cut -f 1 -d ' ')
perl -alne 'print $F[0]'


PERL:HANDY REGULAR EXPRESSIONS
-------------------------

## MATCH SOMETHING THAT LOOKS LIKE AN IP ADDRESS
/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/
/^(\d{1,3}\.){3}\d{1,3}$/

## TEST IF A NUMBER IS IN RANGE 0-255
/^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/

## MATCH AN IP ADDRESS
my $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|;
if ($ip =~ /^($ip_part\.){3}$ip_part$/) {
 say "valid ip";
}

## CHECK IF THE STRING LOOKS LIKE AN EMAIL ADDRESS
/\S+@\S+\.\S+/

## CHECK IF THE STRING IS A DECIMAL NUMBER
/^\d+$/
/^[+-]?\d+$/
/^[+-]?\d+\.?\d*$/

## CHECK IF THE STRING IS A HEXADECIMAL NUMBER
/^0x[0-9a-f]+$/i

## CHECK IF THE STRING IS AN OCTAL NUMBER
/^0[0-7]+$/

## CHECK IF THE STRING IS BINARY
/^[01]+$/

## CHECK IF A WORD APPEARS TWICE IN THE STRING
/(word).*\1/

## INCREASE ALL NUMBERS BY ONE IN THE STRING
$str =~ s/(\d+)/$1+1/ge

## EXTRACT HTTP USER-Agent string from the HTTP headers
/^User-Agent: (.+)$/

## MATCH PRINTABLE ASCII CHARACTERS
/[ -~]/

## MATCH UNPRINTABLE ASCII CHARACTERS
/[^ -~]/

## MATCH TEXT BETWEEN TWO HTML TAGS
m|<strong>([^<]*)</strong>|
m|<strong>(.*?)</strong>|

## REPLACE ALL <b> tags with <strong>
$html =~ s|<(/)?b>|<$1strong>|g

## EXTRACT ALL MATCHES FROM A REGULAR EXPRESSION
my @matches = $text =~ /regex/g;


PERL:TRICKS
-----------

## PRINT THE VERSION OF A PERL MODULE
perl -MModule -le 'print $Module::VERSION'
perl -MLWP::UserAgent -le 'print $LWP::UserAgent::VERSION'


PERL:ONE-LINERS EXPLAINED E-BOOK
--------------------------------

I have written an ebook based on the one-liners in this file. If you wish to
support my work and learn more about these one-liners, you can get a copy
of my ebook at:

    http://www.catonmat.net/blog/perl-book/

The ebook is based on the 7-part article series that I wrote on my blog.
In the ebook I reviewed all the one-liners, improved explanations, added
new ones, and added two new chapters - introduction to Perl one-liners
and summary of commonly used special variables.

You can read the original article series here:

    http://www.catonmat.net/blog/perl-one-liners-explained-part-one/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-two/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-three/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-four/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-five/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-six/
    http://www.catonmat.net/blog/perl-one-liners-explained-part-seven/


-
