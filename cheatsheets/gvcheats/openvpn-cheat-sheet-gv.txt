VPN:BASICS: CHEAT SHEET by gv

sources:
.I https://wiki.debian.org/OpenVPN
.I /usr/share/doc/openvpn/openvpn-examples.5.html
.I https://community.openvpn.net/openvpn/wiki/GettingStartedwithOVPN
.I https://openvpn.net/community-resources/reference-manual-for-openvpn-2-6/

## OPENVPN Simple Tunnel Between two points without any security
On bob pc run: openvpn --remote alice.example.com --dev tun1 --ifconfig 10.4.0.1 10.4.0.2 --verb 9

On alice pc run: openvpn --remote bob.example.com --dev tun1 --ifconfig 10.4.0.2 10.4.0.1 --verb 9

To verify tunnel is working, ping across the tunnel.

On bob ping 10.4.0.2 & On alice ping 10.4.0.1

Tip: The --verb 9 option will produce verbose output, similar to the tcpdump(8) program. Omit the --verb 9 option to have OpenVPN run quietly.

## VPN tunnel with self-signed certificates and fingerprint


First build a self-signed certificate on bob and display its fingerprint.
openssl req -x509 -newkey ec:<(openssl ecparam -name secp384r1) -keyout bob.pem -out bob.pem -nodes -sha256 -days 3650 -subj '/CN=bob'
openssl x509 -noout -sha256 -fingerprint -in bob.pem

and the same on alice:
openssl req -x509 -newkey ec:<(openssl ecparam -name secp384r1) -keyout alice.pem -out alice.pem -nodes -sha256 -days 3650 -subj '/CN=alice'
openssl x509 -noout -sha256 -fingerprint -in alice.pem

These commands will build a text file called bob.pem and alice.pem (in ascii format) that contain both self-signed certificate and key 
and show the fingerprint of the certificates.  Transfer the fingerprints by using the scp(1) or ssh(1) program.

On bob:
openvpn --ifconfig 10.4.0.1 10.4.0.2 --tls-server --dev tun --dh none --cert bob.pem --key bob.pem --cipher AES-256-GCM \
        --peer-fingerprint "$fingerprint_of_alices_cert"

On alice:
openvpn --remote bob.example.com --tls-client --dev tun1  --ifconfig 10.4.0.2 10.4.0.1 --cipher AES-256-GCM  \
        --cert alice.pem --key alice.pem --peer-fingerprint "$fingerprint_of_bobs_cert"

Now verify the tunnel is working by pinging across the tunnel.

On bob ping 10.4.0.2 & On alice ping 10.4.0.1
Note: This example use a elliptic curve (secp384), which allows --dh to be set to none.

## OPENVPN TUNNEL PKI & TLS
source: /usr/share/doc/openvpn/openvpn-examples.5.html
 
For this test, we will designate bob as the TLS client and alice as the TLS server.

Note: The client or server designation only has meaning for the TLS subsystem.  It has no bearing on OpenVPN's peer-to-peer, UDP-based communication model.*

First, build a separate certificate/key pair for both bob and alice 
(see above where --cert is discussed for more info). 

Then construct Diffie Hellman parameters (see above where --dh is discussed for more info). 
You can also use the included test files client.crt, client.key, server.crt, server.key and ca.crt. 

The .crt files are certificates/public-keys, the .key files are private keys, and ca.crt is a certification authority who 
has signed both client.crt and server.crt. For Diffie Hellman parameters you can use the included file dh2048.pem.

WARNING: All client, server, and certificate authority certificates and keys included in the OpenVPN distribution are totally insecure 
and should be used for testing only.

On bob: openvpn --remote alice.example.com --dev tun1 --ifconfig 10.4.0.1 10.4.0.2 \
        --tls-client --ca ca.crt --cert client.crt --key client.key --reneg-sec 60 --verb 5

On alice: openvpn --remote bob.example.com --dev tun1 --ifconfig 10.4.0.2 10.4.0.1 \
          --tls-server --dh dh1024.pem --ca ca.crt --cert server.crt --key server.key --reneg-sec 60 --verb 5

Now verify the tunnel is working by pinging across the tunnel.

On bob:   ping 10.4.0.2

On alice: ping 10.4.0.1

Notice the --reneg-sec 60 option we used above. That tells OpenVPN to renegotiate the data channel keys every minute. 
Since we used --verb 5 above, you will see status information on each new key negotiation.

For production operations, a key renegotiation interval of 60 seconds is probably too frequent. 
Omit the --reneg-sec 60 option to use OpenVPN's default key renegotiation interval of one hour.

.B Routing

Assuming you can ping across the tunnel, the next step is to route a real subnet over the secure tunnel. 
Suppose that bob and alice have two network interfaces each, one connected to the internet, and the other to a private network. 
Our goal is to securely connect both private networks. We will assume that bob's private subnet is 10.0.0.0/24 and alice's is 10.0.1.0/24.

First, ensure that IP forwarding is enabled on both peers. On Linux, enable routing:
cat /proc/sys/net/ipv4/ip_forward and verify if it has value "1" inside. 
If not, then : echo 1 > /proc/sys/net/ipv4/ip_forward

This setting is not persistent. 
Please see your operating systems documentation how to properly configure IP forwarding, which is also persistent through system boots.

If your system is configured with a firewall, see your operating systems guide on how to configure the firewall. 
You typically want to allow traffic coming from and going to the tun/tap adapter OpenVPN is configured to use.

On bob:   route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.4.0.2

On alice: route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.4.0.1

Now any machine on the 10.0.0.0/24 subnet can access any machine on the 10.0.1.0/24 subnet over the secure tunnel (or vice versa).

In a production environment, you could put the route command(s) in a script and execute with the --up option.


## OpenVPN Teltonika (server) with Debian or Windows (client) using Static Key
Source:
.I https://wiki.teltonika-networks.com/view/OpenVPN_configuration_examples

.B 1. On Teltonika Web - VPN configuration page, set up a new openvpn connection with server role.
Use the following configuration on Teltonika page for openvpn setup:

Enable VPN: Yes
TUN/TAP : TUN
Protocol : UDP
Port: 1194
LZO: not selected
Local Tunnel endpoint IP: 10.0.0.1
Remote Tunnel endpoint IP: 10.0.0.2
Remote Network IP Address: <leave it empty>
Remote Netwrok netmask: <leave it empty>
Authentication: Static Key
Encryption: AES-256-CBC 256
Static pre-shared key: <upload from your laptop static.key>

When done, press save and you return to Teltonika openvpn overview page.
You see something like this:
server_txx    tun_s_txx    udp    1194  enable checked

Bug: In the very first overview page of Teltonika, openvpn server status might appear as “disconnected” – this is fake.

Verify with ssh or with Teltonika cli that your server conf file is good to go:
cat /tmp/etc/

.B 2. Generate Static Key
Use Teltonika cli OR  with your debian make ssh to Teltonika. 
To be capable to ssh to Teltonika ensure that "remote ssh" and "remote cli" are enabled on Teltonika - System - Administration - Access Control) 
ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa root@t-xx.ddns.net
cd /etc/easy-rsa
openvpn --genkey --secret static.key 

Tip1: modern openvpn versions (like in my Debian) require "--genkey secret" instead of “--genkey --secret” 

Tip1: in my .bash_aliases i have create a new alias sshlegacy='ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa'

Tip2: You can instead use Debian easy-rsa to generate the static.key and then upload it to Teltonika:
sudo openvpn --genkey secret /etc/openvpn/txxstatic.key && sudo chown gv:gv /etc/openvpn/txxstatic.key

Tip3: If you use easy-rsa of Teltonika for static.key generation, this file will be created in the CWD of Teltonika (/etc/easy-rsa)

.B 3.	Transfer static.key from Teltonika Server to Debian Client 
scp -O -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa root@t-xx.ddns.net:/etc/easy-rsa/static.key /etc/openvpn/t-xxstatic.key
(mind the space between remote and local path)

Verify that the static.key has been copied to Debian /etc/openvpn folder with the name we declared at scp, t-xxstatic.key

Tip1: Obviously this step is not required if the static.key has been created by Debian openvpn and is stored in /etc/openvpn folder.

Tip2: This scp is the legacy method; Modern Teltonika routers with FW >7 , can run just by ssh root@t-xx.ddns.net
      scp -O (capital o) says to scp not to use sftp mode for copying but legacy mode.Usefull when an old version of scp is used.
      Rest -o options are used for the ssh-rsa negotiation, by forcing algorithms to use ssh-rsa.

Tip3: in my .bash_aliases file, i have add an alias of scplegacy='scp -O -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa'

.B 4.	Transfer static.key back to Teltonika from Debian
Go back to Teltonika, openvpn server configuration page and press select button to select static key file using the pop up "open file" dialogue. 
Select the file from your Debian (/etc/openvpn/) to be uploaded to Teltonika.

Tip: Instead to "resend" the static.key from Debian back to Teltonika using the Teltonika OpenVPN Configuration page, you can try
to "edit" the /tmp/etc/t-xx-openvpn-server.conf file and define manually "secret /etc/easy-rsa/static.key' . This method tried once, not sure if it works or fails.

.B 5. Verify Server Configuration
Teltonika openvpn server configuration file located in /tmp/etc should looks like that:
cat /tmp/etc/openvpn-server_txx.conf
persist-key
cipher AES-256-CBC
dev tun_s_txx
ifconfig 10.0.0.1 10.0.0.2
keepalive 10 120
port 1194
proto udp
secret /lib/uci/upload/cbid.openvpn.server_txx.secret
verb 5

Remark: Above conf file is 100% autogenerated by Teltonika OpenVPN page setup.

Tip1: Note that Teltonika tunnel interface is not "tun1" or "tun" as proposed in openvpn documentation. 
You always need to know how each system is recognizing tunnel interface.... In Teltonika this is referred as tun_s_<network_name>

Tip2: Note also the special location that Teltonika is using to store the static.key that we uploaded.

.B 6.	Adjust Teltonika Firewall parameters: 
Firewall – General Settings tab - General Settings Section: 
           Change fields "input", "output" and "forward" to accept 
           This is huge - You will not be capable to get connected without adjusting those to "accept". 
Firewall – General Settings tab – Zone Forwarding section
           Locate "vpn: openvpn" - > Destination Zones -> Edit
           Press Edit and make sure than LAN and also WAN are checked / ticked in the menu [Firewall - Zone Settings - Zone "vpn"] 
Firewall – General Settings tab – Zone Forwarding section
           Change the “Default Forwarding Action” to accept (instead of reject). 
           I have a lot of tests (6,13) in which this option was left to "reject" but openvpn worked fine.
           It has been proved, that while Debian openvpn ignores this setting, Win10 openvpn seems that requires this setting to be adjusted to "Accept".

.B 7.	Debian Client Configuration File
Go back to Debian, and create t-xx.ovpn file, with the bellow contents:
providers legacy default
remote t-xx.ddns.net 1194
proto udp
dev tun
cipher AES-256-CBC
ifconfig 10.0.0.2 10.0.0.1
secret /etc/openvpn/t-xxstatic.key
verb 5
route 192.168.1.0 255.255.255.0
explicit-exit-notify 3

.B 8.	Connect client to the server
On Debian, run openvpn t-xx.ovpn from Debian CLI and you should see the openvpn messages in the cli window. 
When you see "Initialization Sequence Completed" openvpn client is connected to server normally.

Tip: 
If we select the default Teltonika cipher BF-CBC, openvpn complains about insecure cipher. 
OpenVPN 2.6.3 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] [DCO]
library versions: OpenSSL 3.0.9 30 May 2023, LZO 2.10
WARNING: INSECURE cipher (BF-CBC) with block size less than 128 bit (64 bit).  This allows attacks like SWEET32.  Mitigate by using a --cipher with a larger block size (e.g. AES-256-CBC). Support for these insecure ciphers will be removed in OpenVPN 2.7.

##Use your Win10 PC as OpenVPN Client
1. Assuming that you have already OpenVPN-GUI installed in your Win10 machine and you have already configure openvpn server in previous chapter

2. Create Win10 openvpn client configuration file
Go with Win10 CLI to installation folder of Win OpenVPN:  
.I cd C:\Program Files\OpenVPN\bin

Create with text editor (or modify a similar) openvpn configuration file t-xx.ovpn (requires administrator privileges)
#providers legacy default       # Win10 openvpn does not recognize "provides" option
remote t-xx.ddns.net 1194
proto udp                       #use proto tcp-client in case you have adjusted your server to use tcp protocol instead of udp.
dev tun
cipher AES-256-CBC              # if ommited the default openvpn insecure cipher BF-CBC will be used and openvpn will keep complaining....
ifconfig 10.0.0.2 10.0.0.1
secret t-xxstatic.key                 #ensure that t05static.key is in the same folder with t05.ovpn
verb 3
route 192.168.1.0 255.255.255.0
explicit-exit-notify 3               #Win openvpn supported only for UDP. In case of TCP server comment this line.

3. Create manually the static.key file in Win10 
(a) copy paste contents of Debian t-xxstatic.key or Teltonika (patch /lib/uci/upload) to a new t-xxstatic.key in the same Win10 directory that t-xx.ovpn file exists (for simplicity).
(b) Use WinSCP to scp this file from Teltonika /lib/uci/upload folder (drag and drop to win Program Files/openvpn/bin path)

#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
4ee306adfbed52465ec8576ae3e418e7
......
......
709ab67bc19ac10baaa6ec7404d4211b
-----END OpenVPN Static key V1-----

Now your openvpn folder in Win10 (C:\Program Files\OpenVPN\bin) should contain both files t-xx.ovpn and t-xxstatic.key

Run this command from windows CLI with administrator command line: openvpn t-xx.ovpn

Important: Make sure that your win10 openvpn and it’s relevant Win10 tunnel are “free” - not used/not connected somewhere else!
As in Debian you need to maintain this cli window open to keep the vpn connection open.
 
.B Sources: 
https://wiki.teltonika-networks.com/view/OpenVPN_configuration_examples
https://wiki.teltonika-networks.com/view/RUT955_Firewall#Traffic_Rules
https://stosb.com/blog/explaining-my-configs-openvpn/
https://wiki.debian.org/OpenVPN
https://wiki.teltonika-networks.com/view/RUT950_VPN
https://community.teltonika-networks.com/29993/can-not-access-lan-behind-rut950-as-openvpn-client
https://wiki.teltonika-networks.com/view/OpenVPN_config_file_example
https://openvpn.net/community-resources/reference-manual-for-openvpn-2-5/


.B To be tested:
a.	Adjust Debian to be vpn server and rut950 to be the client, ensuring that “server” (Debian) will be capable to see the LAN behind client (rut950)
b.	Find (or built) an openvpn server in a “3rd” machine. Adjust Debian and Teltonika to have “client-role”. 
Both machines (rut950 – Debian) get connected to the 3rd “vpn server” – 
You need to adjust server to allow forwarding from one client to the other (client-to-client). 
In this setup we need: 
    (1) Debian client to be capable to access Teltonika client behind-LAN (client to client).
    (2) openvpn server machine should have access to behind-lan of both Debian and Teltonika.

.B Bugs
It has been proved that Teltonika openvpn server is actually disconnected - port is closed after some time/days of inactivity.
This can be verified by using 
sudo nmap -sU -sC -sV -p 1194 <openvpnserver domain name/dyndns name / ip>

Sometimes, a simple ping to openvpnserver seems enough to wake the server.
But sometimes, you need to get connected to Teltonika Web Interface and tickle the openvpn tab/server.
 
## OPENVPN TELTONIKA-DEBIAN QUICK STEP GUIDE
1. In your Debian create the static key: 
sudo openvpn --generate secret /etc/openvpn/networkname.key
sudo chown gv:gv /etc/openvpn/networkname.key
2. In Teltonika add a new openvpn instance, server role, fullfill all the required fields.
Don't forget to provide virtual IPs of server and client , and also upload the static key generated by Debian.
3. Make the necessary adjustments to Teltonika Firewall.
4. On Debian Client create (or copy from previous) the .ovpn fonciguration file . 
Do not forget to define remote server - port - protocol, secret key path, cipher algorithm, explicit-exit-notify and other related parameters.
5. You should be ready! Just run sudo openvpn networkname.ovpn to test it.

##Teltonika VPN via OpenVPN Cloud 
https://openvpn.net/cloud-docs/deploying-connector-on-teltonika-rutos-compatible-router/?_gl=1*tb9354*_ga*MTkyNzc5Mzg4LjE2OTI5Nzg1MTM.*_ga_SPGM8Y8Y79*MTY5NDQ2OTQ2Ny40LjEuMTY5NDQ3NTQyNi4wLjAuMA..&_ga=2.102216897.1538277576.1694469468-192779388.1692978513

The concept here is that OpenVPN Cloud works as a TCP Server and both Debian and Teltonika are "clients" to this server. 
In free version of OpenVPN Cloud there is a limit of connections (if i am not wrong, only two clients are allowed to cloud server).  
Steps:
1.	Create your cloud.openvpn.com account.
2.	Create a network , i.e aurora2
3.	Create a connector for this network (connector01)
4.	Once connector01 is created click on “Deploy” to edit this connector 
5.	On Connector Type scroll down to “OpenVPN Compatible Router” and select Teltonika.
6.	Download OVPN profile (something like connector01_milan.ovpn file)
7.	At RUT950 create a new openvpn setup – client role and “edit” configuration of this setup
8.	Enable “OpenVPN config from file” and then browse for .ovpn file using the popup that will appear to “select” the ovpn file -> 
Make sure that “Enable” is set to “ON” -> Save and Apply
tip: In this window, the file selection pop-up will show files in your pc, not in Teltonika. 
It has been proved that if you select the .ovpn file saved from cloud.openvpn in your pc desktop this .ovpn file will be somehow magically “imported” to RUT950.

9.	Normally you should see something like that, advising that “client” is connected without any manual settings modification required. 
10.	Back to cloud.openvpn you need now to add a host. Go to “STATUS”, click on “Hosts” and then press “add host” 
11.	Provide name of the host and name of the connector 
12.	Select Connector Type – Linux – Debian
13.	Do not execute the prompted script, but scroll to the end of the page and click on “Next”
You will be prompted that connector is offline, just skip the connectivity test.
 
14.	Leave blank “Add Application” and “Add IP Service”
15.	On the last step “Configure Access Group” select “Default full mesh access group”:
16.	Click on Finish
17. Screenshot Deleted
18.	Go to “Connectors” tab , click the “deploy” menu and select from the drop-down list the option “Download Profile in ovpn format”:
19.	Save the file to your desktop, open the file with text editor find the line 
cipher AES-256-CBC
Add this line bellow above line and save
data-ciphers AES-256-CBC

20.	Goto “Networks” , Select “Aurora2” network, and go to “IP Services” and complete “IP Services” and “Route” as shown bellow -> Save / Apply
 
21.	Open Terminal , go to directory that .ovpn is located and run 
$sudo openvpn connector03_milan.ovpn
22. Deleted
 
23.	If all steps have be executed correctly now you should be able to ping Teltonika from Debian and viceversa using the provided virtual IP by openvpn cloud service.
 
24.	At this point, without knowing why, all of a magic, Debian was able to “load” using firefox all the well known webpages in Teltonika Lan like 192.168.1.1 / 192.168.1.2 / 192.168.1.200 etc

Tip1: You can ping only the connectors. You can not ping the IP of the “host” / “network” which is different than connectors.

Tip2: This is the Debian Terminal screen (which has to remain open to maintain openvpn connection) 

.B Run the openvpn
gv@debssd:~/Desktop$ sudo openvpn connector03_milan.ovpn
2023-09-12 02:14:36 Note: cipher 'AES-256-CBC' in --data-ciphers is not supported by ovpn-dco, disabling data channel offload.
2023-09-12 02:14:36 OpenVPN 2.6.3 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] [DCO]
2023-09-12 02:14:36 library versions: OpenSSL 3.0.9 30 May 2023, LZO 2.10
2023-09-12 02:14:36 DCO version: N/A
2023-09-12 02:14:46 TCP/UDP: Preserving recently used remote address: [AF_INET6]2a02:6ea0:d511::5:1194
2023-09-12 02:14:46 Socket Buffers: R=[212992->212992] S=[212992->212992]
2023-09-12 02:14:46 NOTE: setsockopt TCP_NODELAY=1 failed
2023-09-12 02:14:46 UDPv6 link local: (not bound)
2023-09-12 02:14:46 UDPv6 link remote: [AF_INET6]2a02:6ea0:d511::5:1194
2023-09-12 02:14:46 TLS: Initial packet from [AF_INET6]2a02:6ea0:d511::5:1194, sid=cc6dccdb c9d1a32b
2023-09-12 02:14:46 net_route_v4_best_gw query: dst 0.0.0.0
2023-09-12 02:14:46 net_route_v4_best_gw result: via 192.168.2.1 dev enp0s3
2023-09-12 02:14:46 VERIFY OK: depth=1, CN=CloudVPN Prod CA
2023-09-12 02:14:46 VERIFY KU OK
2023-09-12 02:14:46 Validating certificate extended key usage
2023-09-12 02:14:46 ++ Certificate has EKU (str) TLS Web Server Authentication, expects TLS Web Server Authentication
2023-09-12 02:14:46 VERIFY EKU OK
2023-09-12 02:14:46 VERIFY OK: depth=0, CN=it-mxp-dc1-g1.cloud.openvpn.net
2023-09-12 02:14:46 Control Channel: TLSv1.3, cipher TLSv1.3 TLS_AES_256_GCM_SHA384, peer certificate: 2048 bit RSA, signature: RSA-SHA256
2023-09-12 02:14:46 [it-mxp-dc1-g1.cloud.openvpn.net] Peer Connection Initiated with [AF_INET6]2a02:6ea0:d511::5:1194
2023-09-12 02:14:46 TLS: move_session: dest=TM_ACTIVE src=TM_INITIAL reinit_src=1
2023-09-12 02:14:46 TLS: tls_multi_process: initial untrusted session promoted to trusted
2023-09-12 02:14:47 SENT CONTROL [it-mxp-dc1-g1.cloud.openvpn.net]: 'PUSH_REQUEST' (status=1)
2023-09-12 02:14:47 PUSH: Received control message: 'PUSH_REPLY,route-gateway 100.96.1.33,ifconfig 100.96.1.34 255.255.255.240,ifconfig-ipv6 fd:0:0:8102::2/64 fd:0:0:8102::1,client-ip 2a02:85f:f08a:cf00:db23:1bf5:b520:901a,ping 8,ping-restart 40,reneg-sec 3600,key-derivation tls-ekm,topology subnet,explicit-exit-notify,remote-cache-lifetime 86400,block-outside-dns,route 100.96.0.0 255.224.0.0,route-ipv6 fd:0:0:8000::/49,route 100.80.0.0 255.240.0.0,route-ipv6 fd:0:0:4000::/50,route 192.168.1.0 255.255.255.0,dhcp-option DNS 100.96.1.33,auth-tokenSESS_ID,auth-token-user Z2V2YXNpbGlvdS9jb25uZWN0b3IvOTZhYTA0MGItMjdkNi00YTU0LWE3MmQtYmE0MWJlNWRkNTkwX2VjMTBiMmQyLWZmOWUtNGRjOS04NGM1LWE1Yzg1MWVkYWI0ZA=='
2023-09-12 02:14:47 Options error: Unrecognized option or missing or extra parameter(s) in [PUSH-OPTIONS]:4: client-ip (2.6.3)
2023-09-12 02:14:47 Options error: option 'reneg-sec' cannot be used in this context ([PUSH-OPTIONS])
2023-09-12 02:14:47 Options error: Unrecognized option or missing or extra parameter(s) in [PUSH-OPTIONS]:11: remote-cache-lifetime (2.6.3)
2023-09-12 02:14:47 Options error: Unrecognized option or missing or extra parameter(s) in [PUSH-OPTIONS]:12: block-outside-dns (2.6.3)
2023-09-12 02:14:47 OPTIONS IMPORT: --ifconfig/up options modified
2023-09-12 02:14:47 OPTIONS IMPORT: route options modified
2023-09-12 02:14:47 OPTIONS IMPORT: route-related options modified
2023-09-12 02:14:47 OPTIONS IMPORT: --ip-win32 and/or --dhcp-option options modified
2023-09-12 02:14:47 net_route_v4_best_gw query: dst 0.0.0.0
2023-09-12 02:14:47 net_route_v4_best_gw result: via 192.168.2.1 dev enp0s3
2023-09-12 02:14:47 ROUTE_GATEWAY 192.168.2.1/255.255.255.0 IFACE=enp0s3 HWADDR=08:00:27:d2:fc:0d
2023-09-12 02:14:47 GDG6: remote_host_ipv6=2a02:6ea0:d511::5
2023-09-12 02:14:47 net_route_v6_best_gw query: dst 2a02:6ea0:d511::5
2023-09-12 02:14:47 net_route_v6_best_gw result: via fe80::1 dev enp0s3
2023-09-12 02:14:47 ROUTE6_GATEWAY fe80::1 IFACE=enp0s3
2023-09-12 02:14:47 TUN/TAP device tun0 opened
2023-09-12 02:14:47 net_iface_mtu_set: mtu 1500 for tun0
2023-09-12 02:14:47 net_iface_up: set tun0 up
2023-09-12 02:14:47 net_addr_v4_add: 100.96.1.34/28 dev tun0
2023-09-12 02:14:47 net_iface_mtu_set: mtu 1500 for tun0
2023-09-12 02:14:47 net_iface_up: set tun0 up
2023-09-12 02:14:47 net_addr_v6_add: fd:0:0:8102::2/64 dev tun0
2023-09-12 02:14:47 net_route_v4_add: 100.96.0.0/11 via 100.96.1.33 dev [NULL] table 0 metric -1
2023-09-12 02:14:47 net_route_v4_add: 100.80.0.0/12 via 100.96.1.33 dev [NULL] table 0 metric -1
2023-09-12 02:14:47 net_route_v4_add: 192.168.1.0/24 via 100.96.1.33 dev [NULL] table 0 metric -1
2023-09-12 02:14:47 add_route_ipv6(fd:0:0:8000::/49 -> fd:0:0:8102::1 metric -1) dev tun0
2023-09-12 02:14:47 net_route_v6_add: fd:0:0:8000::/49 via :: dev tun0 table 0 metric -1
2023-09-12 02:14:47 add_route_ipv6(fd:0:0:4000::/50 -> fd:0:0:8102::1 metric -1) dev tun0
2023-09-12 02:14:47 net_route_v6_add: fd:0:0:4000::/50 via :: dev tun0 table 0 metric -1
2023-09-12 02:14:47 Initialization Sequence Completed
2023-09-12 02:14:47 Data Channel: cipher 'AES-256-CBC', auth 'SHA256'
2023-09-12 02:14:47 Timers: ping 8, ping-restart 40
2023-09-12 02:14:47 Protocol options: explicit-exit-notify 1, protocol-flags tls-ekm

.B connector01_milan.opvn (RUT950)
setenv USERNAME "gevasiliou/connector/abf939a2-......7068"
# OVPN_WEBAUTH_FRIENDLY_USERNAME=gevasiliou/aurora2/connector01
# OVPN_FRIENDLY_PROFILE_NAME=aurora2@gevasiliou.openvpn.com [Milan]
client
dev tun
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 443 tcp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote-cert-tls server
cipher AES-256-CBC
auth SHA256
persist-tun
nobind
verb 3
socket-flags TCP_NODELAY
push-peer-info
<ca>
-----BEGIN CERTIFICATE-----
MIIDRDCCAiygAwIBAgIJAPRJm0V+RAQkMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV
.
.
d4rhWO4aNE5qqE6lq5AOJ1riv7BrZ4jj
-----END CERTIFICATE-----
</ca>
<cert>
-----BEGIN CERTIFICATE-----
MIIDSjCCAjKgAwIBAgIDD74XMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMMEENs
.
.
US/GHDJSdnIRNxYFeWthiENGkpVvj0yFCKst7Yx4
-----END CERTIFICATE-----
</cert>
<key>
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAyt0FiHpzyZP2fugYKhOvUwq31hD7loISm/esYTtiHV9+nOns
.
.
J3jnWjXssV/+uGon5QqX9GZhJF19Uu2WafuJo/O+AvR6utgeUCWE
-----END RSA PRIVATE KEY-----
</key>
key-direction 1
<tls-auth>
-----BEGIN OpenVPN Static key V1-----
4f65292e639c83574026ab790f67257b
..
..
521021b9e6d45cdee7bfd22fce270a49
-----END OpenVPN Static key V1-----
</tls-auth>

.B Host Connector03_Milan.ovpn (Debian)
setenv USERNAME "gevasiliou/connector/96aa040b-.......-a5c851edab4d"
# OVPN_WEBAUTH_FRIENDLY_USERNAME=gevasiliou/auro2-telto/connector03
# OVPN_FRIENDLY_PROFILE_NAME=auro2-telto@gevasiliou.openvpn.com [Milan]
client
dev tun
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 443 tcp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote it-mxp.gw.openvpn.com 1194 udp
remote-cert-tls server
cipher AES-256-CBC
data-ciphers AES-256-CBC
auth SHA256
persist-tun
nobind
verb 4
socket-flags TCP_NODELAY
push-peer-info
<ca>
-----BEGIN CERTIFICATE-----
MIIDRDCCAiygAwIBAgIJAPRJm0V+RAQkMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV
.
.
d4rhWO4aNE5qqE6lq5AOJ1riv7BrZ4jj
-----END CERTIFICATE-----
</ca>
<cert>
-----BEGIN CERTIFICATE-----
MIIDSjCCAjKgAwIBAgIDD742MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMMEENs
.
.
atdFtjNwkCFUukAOJmRziTRzubl2/EfNmwKk0nnF
-----END CERTIFICATE-----
</cert>
<key>
-----BEGIN RSA PRIVATE KEY-----
MIIEoQIBAAKCAQEAqICRDPi1I0q7Qem1r6FSjLkNnQfpRMbp9KB+ESqj69gwp10f
.
nubxmsRCX+PvPxGj6szFx486mo08x2jNkhKzlcg2DfMlGJ+C+w==
-----END RSA PRIVATE KEY-----
</key>
key-direction 1
<tls-auth>
-----BEGIN OpenVPN Static key V1-----
4f65292e639c83574026ab790f67257b
.
.
521021b9e6d45cdee7bfd22fce270a49
-----END OpenVPN Static key V1-----
</tls-auth>

## Connect to cloud.openvpn with win10
Assuming that openvpnGUI is installed on your Win10PC. 
Navigate to installation directory (C:\Program Files\OpenVPN\bin) and you should see that there is openvpn.exe file in there (without GUI in it’s name).

Fresh Download Host Connector 03 from cloud.openvpn and save it to above OpenVPN\bin folder.
 
Open a command prompt with Administrator Privileges and navigate to C:\Program Files\OpenVPN\bin
run the command openvpn connector03_Milan.ovpn
After some seconds you should end up in something like this:
 
If you receive an netsh error, you need to go to network adapter settings, locate TAP-Windows adapter and make sure that:
a.	DHCP – Automatic Set of IP Address is selected for this TAP Adapter (DHCP was ON in my case)
b.	IP v6 is active for this TAP adapter (IP6 was OFF/Disabled in my case). OpenVPN requires IPv6 to be active.
 
After you enable TAP DHCP & IP6 you should be ok. Keep the command line window open to maintain the openvpn connection

Once connected you can try (from another instance of command line interface) to ping Network connector01 IP Address (tip: make sure to use connector IP and not Network IP) and also you can try to ping lan addresses behind connector01 (i.e 192.168.1.xx)
 
Similarly, from Win10 Chrome you can visit webpages of connector01 lan

Tips:
1.	Though that it is known that IP 192.168.1.1 exists also in my Office WiFi lan, once openvpn is deployed we can see that http://192.168.1.1 send us to Teltonika Login Page instead of WiFi router page. Somehow, openvpn gets higher priority over WiFi network.
2.	It was not necessary to create a new host and a new connector for my Win10 machine. I succeed to get connected to cloud.openvpn by using the same connector03 / same host that I was using in my Debian Tests.
3.	In Win10 it was not necessary to add the line data-ciphers AES-256-CBC to the file connector03_Milan.ovpn
4.	Thus said, Win10 using openvpn.exe + connector03 ovpn file are working fine, so you don’t need to power up Debian VM for this purpose.
5.	In my Win10, openvpnGUI is by default related to config file AutomatedHostname-UDP4-1194-maintenance-config.ovpn which is used for Entersoft Access (stored in path C:\Program Files\OpenVPN\config). 
It has been proved that once openvpn connector03_Milan.ovpn is terminated (control + C + Close CLI Window) then OpenVPNGUI can run as before. We succeed to avoid conflicts between ovpn conf files.
6.	Obviously, if we tweak openvpn more, I am pretty sure that we can find a way to get connected to cloud.openvpn using OpenVPN-GUI instead of CLI, but this is not mandatory since simple CLI with openvpn.exe works just fine with connector03_Milan.ovpn
7.	Bug: OpenVPN Clouds allows a limited amount of users to be connected for free (I think that only 3 concurrent connections are allowed).

VPN:OPENVPN OPTIONS & DOCUMENTATION
## Documents and examples
man openvpn
cd /usr/share/doc/openvpn

In this directory you can see two help files in html format:
openvpn.8.html
openvpn-examples.5.html

You can use php built-in web server to view those files quickly:
php -S localhost:8080 openvpn.8.html
php -S localhost:8080 openvpn-examples.5.html

Just visit localhost:8080 with web browser!

## OPENVPN OPTIONS
.B explicit-exit-notify 3
It has been proved , that when you interrupt the connection to server using ctrl+c , you can not reconnect and you receive errors like that:
2023-10-22 02:30:05 read UDPv4 [ECONNREFUSED]: Connection refused (fd=4,code=111)

This error appears because client disconnects suddenly from the server. 
After some time, server realizes that client is not available, client is deleted by server's cache and after this point you can reconnect.
Using option explicit-exit-notify you force the client to disconnect not just "dissapear".

The results of this option are straight forward:
  (*) Connect to vpn server
  (*) Disconnect 
  (*) Try to reconnect.

Without explicit-exit-notify , you need to wait ~15 minutes in order server to realize that client is gone and allow same client reconnecting.

But when explicit-exit-notify is present, client exciting becomes smooth and reconnects can be done without delays:
2023-10-22 02:52:03 Protocol options: explicit-exit-notify 3
^C2023-10-22 02:58:38 event_wait : Interrupted system call (fd=-1,code=4)
2023-10-22 02:58:38 SIGTERM received, sending exit notification to peer
2023-10-22 02:58:39 read UDPv4 [ECONNREFUSED]: Connection refused (fd=4,code=111)
2023-10-22 02:58:40 read UDPv4 [ECONNREFUSED]: Connection refused (fd=4,code=111)
2023-10-22 02:58:41 net_route_v4_del: 192.168.1.0/24 via 10.0.0.1 dev [NULL] table 0 metric -1
2023-10-22 02:58:41 Closing TUN/TAP interface
2023-10-22 02:58:41 net_addr_ptp_v4_del: 10.0.0.2 dev tun0
2023-10-22 02:58:41 SIGTERM[soft,exit-with-notification] received, process exiting

.B dev tun
This command is actually CREATING a tunnel. Might be invoked as tun1 to forcibly create tun1.
When tun is used without number, tunnels are created with dynamic names (tun0, tun1, etc).
It is allowed to create more than one tunnels (from different openvpn instances running at the same time)

It is also possible to use your own name for the virtual network device, but you then need to use --dev-type in addition.
   dev myvpn
   dev-type tun

.B cipher VS data-cipher
data-cipher seems to be the replacement of the cipher; cipher will be depreciated from newer openvpn versions

.B data-ciphers-fallback AES-128-CBC
As it's described by name is a fallback option for data-ciphers

.B data-ciphers AES-256-CBC:AES-256-CFB:AES-256-CFB1:AES-256-CFB8:AES-256-OFB:AES-256-GCM
defining multiple data-ciphers

.B proto
Defines the comm protocol between Server and Client(s). 
    proto udp         # in both client and server configurations for udp protocol. 
    proto tcp-server  # For TCP, required by the server
    proto tcp-client  # For TCP, required by the client

proto can be combined in the remote command like this:
   remote myvpn.example.com 1194 udp
   remote myvpn.example.com 443 tcp-client

It is also possible to connect using IPv6. In openvpn 2.3 releases, you will need to replace udp, tcp-client or tcp-server with udp6, tcp6-client or tcp6-server as the argument to the --proto option. 
From the OpenVPN 2.4, OpenVPN will try both IPv6 and IPv4 when just using udp/tcp-client/tcp-server. 
To enforce only IPv4-only, you need to use udp4, tcp4-client or tcp4-server. Similarly to enforce IPv6-only use udp6/tcp6-client/tcp6-server. 

.B nobind
 This makes OpenVPN use a random client side port when connecting. 
 Without it, openvpn will use the same port number as used to connect to the server. 
 This option is usefull if you want to run multiple VPN clients on the same host to avoid using the same port 1194 for all instances.

.B Set up specific dns to be used in the specific vpn connection.
source: https://superuser.com/questions/637579/setting-dns-servers-using-openvpn-client-config-file
This will help when you log in to another lan, which is equipped with a customized DNS to allow resolving of addresses like "ermis" , etc.
Obviously, if you use the IP address of "ermis" you can connect directly....

Add the following to the client config file.
dhcp-option DNS <dns_server_ip_address>

On the server side it would have been :
push "dhcp-option DNS <dns_server_ip_address>"
PS1: It seems it's using dhcp-option on both sides. You can do the same with route

PS2: Some other guy suggest that you have also include bellow options in the ovpn file:
register-dns
block-outside-dns

The 1st forces Windows to prefer the configured DNS server over any other it may have received from DHCP. 
The 2nd prevents DNS leakage to any DNS server other than the configured one.
